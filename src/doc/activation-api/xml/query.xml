<refentry id="bonobo-activation-Query-and-Activation">
<refmeta>
<refentrytitle role="top_of_page" id="bonobo-activation-Query-and-Activation.top_of_page">Query and Activation</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO-ACTIVATION Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Query and Activation</refname>
<refpurpose>Querying for components and Activating them</refpurpose>
</refnamediv>

<refsynopsisdiv id="bonobo-activation-Query-and-Activation.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;bonobo-activation/bonobo-activation.h&gt;

typedef             <link linkend="Bonobo-ImplementationID">Bonobo_ImplementationID</link>;
typedef             <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link>;
typedef             <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link>;
enum                <link linkend="Bonobo-ActivationResultType">Bonobo_ActivationResultType</link>;
<link linkend="Bonobo-ServerInfoList">Bonobo_ServerInfoList</link> * <link linkend="bonobo-activation-query">bonobo_activation_query</link>         (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-Object">CORBA_Object</link>        <link linkend="bonobo-activation-activate">bonobo_activation_activate</link>          (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> *ret_aid,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-Object">CORBA_Object</link>        <link linkend="bonobo-activation-activate-from-id">bonobo_activation_activate_from_id</link>  (const <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> aid,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> *ret_aid,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                (<link linkend="BonoboActivationCallback">*BonoboActivationCallback</link>)         (<link linkend="CORBA-Object">CORBA_Object</link> activated_object,
                                                         const <link linkend="char">char</link> *error_reason,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-activation-activate-async">bonobo_activation_activate_async</link>    (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="BonoboActivationCallback">BonoboActivationCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-activation-activate-from-id-async">bonobo_activation_activate_from_id_async</link>
                                                        (const <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> aid,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="BonoboActivationCallback">BonoboActivationCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-activation-set-activation-env-value">bonobo_activation_set_activation_env_value</link>
                                                        (const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);
</synopsis>
</refsynopsisdiv>









<refsect1 id="bonobo-activation-Query-and-Activation.description" role="desc">
<title role="desc.title">Description</title>
<para>
This section describes how you can query for components
and activate them.
</para>
<para>
Two set of functions are described: synchronous and
asynchronous ones. The asynchronous version of the functions
allow you to avoid blocking your application while the CORBA
servers are started.
</para>
</refsect1>

<refsect1 id="bonobo-activation-Query-and-Activation.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="Bonobo-ImplementationID" role="typedef">
<title>Bonobo_ImplementationID</title>
<indexterm zone="Bonobo-ImplementationID"><primary sortas="Bonobo_ImplementationID">Bonobo_ImplementationID</primary></indexterm><programlisting>typedef CORBA_string Bonobo_ImplementationID;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Bonobo-ActivationID" role="typedef">
<title>Bonobo_ActivationID</title>
<indexterm zone="Bonobo-ActivationID"><primary sortas="Bonobo_ActivationID">Bonobo_ActivationID</primary></indexterm><programlisting>typedef CORBA_string Bonobo_ActivationID;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Bonobo-ActivationFlags" role="typedef">
<title>Bonobo_ActivationFlags</title>
<indexterm zone="Bonobo-ActivationFlags"><primary sortas="Bonobo_ActivationFlags">Bonobo_ActivationFlags</primary></indexterm><programlisting>typedef CORBA_long Bonobo_ActivationFlags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="Bonobo-ActivationResultType" role="enum">
<title>enum Bonobo_ActivationResultType</title>
<indexterm zone="Bonobo-ActivationResultType"><primary sortas="Bonobo_ActivationResultType">Bonobo_ActivationResultType</primary></indexterm><programlisting>typedef enum {
  Bonobo_ACTIVATION_RESULT_OBJECT,
  Bonobo_ACTIVATION_RESULT_SHLIB,
  Bonobo_ACTIVATION_RESULT_NONE
} Bonobo_ActivationResultType;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-activation-query" role="function">
<title>bonobo_activation_query ()</title>
<indexterm zone="bonobo-activation-query"><primary sortas="bonobo_activation_query">bonobo_activation_query</primary></indexterm><programlisting><link linkend="Bonobo-ServerInfoList">Bonobo_ServerInfoList</link> * bonobo_activation_query         (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Executes the <parameter>requirements</parameter> query on the bonobo-activation-server.
The result is sorted according to <parameter>selection_order</parameter>. 
<parameter>selection_order</parameter> can safely be NULL as well as <parameter>ev</parameter>.
The returned list has to be freed with CORBA_free.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>requirements</parameter>&#160;:</term>
<listitem><simpara> query string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_order</parameter>&#160;:</term>
<listitem><simpara> sort criterion for returned list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="CORBA-Environment"><literal>CORBA_Environment</literal></link> structure which will contain 
     the CORBA exception status of the operation, or NULL
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the list of servers matching the requirements.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-activate" role="function">
<title>bonobo_activation_activate ()</title>
<indexterm zone="bonobo-activation-activate"><primary sortas="bonobo_activation_activate">bonobo_activation_activate</primary></indexterm><programlisting><link linkend="CORBA-Object">CORBA_Object</link>        bonobo_activation_activate          (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> *ret_aid,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Activates a given object. <parameter>ret_aid</parameter> can be safely NULLed as well
as <parameter>ev</parameter> and <parameter>selection_order</parameter>. <parameter>flags</parameter> can be set to zero if you do 
not what to use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>requirements</parameter>&#160;:</term>
<listitem><simpara> query string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_order</parameter>&#160;:</term>
<listitem><simpara> sort criterion for returned list.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> how to activate the object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_aid</parameter>&#160;:</term>
<listitem><simpara> AID of the activated object.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> <link linkend="CORBA-Environment"><literal>CORBA_Environment</literal></link> structure which will contain 
     the CORBA exception status of the operation. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the CORBA object reference of the activated object.
              This value can be CORBA_OBJECT_NIL: you are supposed 
              to check <parameter>ev</parameter> for success.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-activate-from-id" role="function">
<title>bonobo_activation_activate_from_id ()</title>
<indexterm zone="bonobo-activation-activate-from-id"><primary sortas="bonobo_activation_activate_from_id">bonobo_activation_activate_from_id</primary></indexterm><programlisting><link linkend="CORBA-Object">CORBA_Object</link>        bonobo_activation_activate_from_id  (const <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> aid,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> *ret_aid,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Activates the server corresponding to <parameter>aid</parameter>. <parameter>ret_aid</parameter> can be safely 
NULLed as well as <parameter>ev</parameter>. <parameter>flags</parameter> can be zero if you do not know what 
to do.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>aid</parameter>&#160;:</term>
<listitem><simpara> AID or IID of the object to activate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> activation flag.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ret_aid</parameter>&#160;:</term>
<listitem><simpara> AID of the activated server.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> <link linkend="CORBA-Environment"><literal>CORBA_Environment</literal></link> structure which will contain 
     the CORBA exception status of the operation. 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a CORBA object reference to the newly activated 
              server. Do not forget to check <parameter>ev</parameter> for failure!!
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboActivationCallback" role="function">
<title>BonoboActivationCallback ()</title>
<indexterm zone="BonoboActivationCallback"><primary sortas="BonoboActivationCallback">BonoboActivationCallback</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboActivationCallback)         (<link linkend="CORBA-Object">CORBA_Object</link> activated_object,
                                                         const <link linkend="char">char</link> *error_reason,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This is the signature of the function which you must pass
as a callback to the asynchrounous activation functions.
</para><variablelist role="params">
<varlistentry><term><parameter>activated_object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error_reason</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-activate-async" role="function">
<title>bonobo_activation_activate_async ()</title>
<indexterm zone="bonobo-activation-activate-async"><primary sortas="bonobo_activation_activate_async">bonobo_activation_activate_async</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_activate_async    (const <link linkend="char">char</link> *requirements,
                                                         <link linkend="char">char</link> *const *selection_order,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="BonoboActivationCallback">BonoboActivationCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This function will asynchronously try to activate a component
given the <parameter>requirements</parameter> query string. When the component is
activated or when the activation fails, it will call <parameter>callback</parameter>
with the given <parameter>user_data</parameter> data as parameter.
callback will be called with a CORBA_OBJECT_NIL object if the
activation fails. If the activation fails, the callback will be
given a human-readable string containing a description of the
error. In case of sucess, the error string value is undefined.
</para>
<para>
<parameter>selection_order</parameter> can be safely NULLed as well as <parameter>ev</parameter> and
<parameter>user_data</parameter>. <parameter>flags</parameter> can be set to 0 if you do not know what to
use.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>requirements</parameter>&#160;:</term>
<listitem><simpara> the bonobo-activation query string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>selection_order</parameter>&#160;:</term>
<listitem><simpara> preference array.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> activation flags.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to be poassed to the callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> exception structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-activate-from-id-async" role="function">
<title>bonobo_activation_activate_from_id_async ()</title>
<indexterm zone="bonobo-activation-activate-from-id-async"><primary sortas="bonobo_activation_activate_from_id_async">bonobo_activation_activate_from_id_async</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_activate_from_id_async
                                                        (const <link linkend="Bonobo-ActivationID">Bonobo_ActivationID</link> aid,
                                                         <link linkend="Bonobo-ActivationFlags">Bonobo_ActivationFlags</link> flags,
                                                         <link linkend="BonoboActivationCallback">BonoboActivationCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This function will asynchronously try to activate a component
with the given <parameter>aid</parameter>. When the component is
activated or when the activation fails, it will call <parameter>callback</parameter>
with the given <parameter>user_data</parameter> data as parameter.
callback will be called with a CORBA_OBJECT_NIL object if the
activation fails. If the activation fails, the callback will be
given a human-readable string containing a description of the
error. In case of sucess, the error string value is undefined.
</para>
<para>
<parameter>flags</parameter> can be 0 if you do not know what to set it to and
<parameter>ev</parameter> can be safely set to NULL.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>aid</parameter>&#160;:</term>
<listitem><simpara> the AID or IID of the component to activate.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> activation flags.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data to be poassed to the callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> exception structure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-set-activation-env-value" role="function">
<title>bonobo_activation_set_activation_env_value ()</title>
<indexterm zone="bonobo-activation-set-activation-env-value"><primary sortas="bonobo_activation_set_activation_env_value">bonobo_activation_set_activation_env_value</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_set_activation_env_value
                                                        (const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
