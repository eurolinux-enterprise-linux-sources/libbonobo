<refentry id="bonobo-activation-Registration">
<refmeta>
<refentrytitle role="top_of_page" id="bonobo-activation-Registration.top_of_page">Registration</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>BONOBO-ACTIVATION Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Registration</refname>
<refpurpose>Registering CORBA objects to Bonobo Activation.</refpurpose>
</refnamediv>

<refsynopsisdiv id="bonobo-activation-Registration.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>

#include &lt;bonobo-activation/bonobo-activation.h&gt;

enum                <link linkend="Bonobo-RegistrationResult">Bonobo_RegistrationResult</link>;
<link linkend="void">void</link>                <link linkend="bonobo-activation-unregister-active-server">bonobo_activation_unregister_active_server</link>
                                                        (const <link linkend="char">char</link> *iid,
                                                         <link linkend="CORBA-Object">CORBA_Object</link> obj);
<link linkend="void">void</link>                <link linkend="bonobo-activation-registration-env-free">bonobo_activation_registration_env_free</link>
                                                        (<link linkend="GSList">GSList</link> *reg_env);
<link linkend="GSList">GSList</link> *            <link linkend="bonobo-activation-registration-env-set">bonobo_activation_registration_env_set</link>
                                                        (<link linkend="GSList">GSList</link> *reg_env,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);
<link linkend="void">void</link>                <link linkend="bonobo-activation-registration-env-set-global">bonobo_activation_registration_env_set_global</link>
                                                        (<link linkend="GSList">GSList</link> *reg_env,
                                                         <link linkend="gboolean">gboolean</link> append_if_existing);
<link linkend="Bonobo-RegistrationResult">Bonobo_RegistrationResult</link>  <link linkend="bonobo-activation-register-active-server">bonobo_activation_register_active_server</link>
                                                        (const <link linkend="char">char</link> *iid,
                                                         <link linkend="CORBA-Object">CORBA_Object</link> obj,
                                                         <link linkend="GSList">GSList</link> *reg_env);
const <link linkend="char">char</link> *        <link linkend="bonobo-activation-iid-get">bonobo_activation_iid_get</link>           (void);
                    <link linkend="BonoboActivationPlugin">BonoboActivationPlugin</link>;
                    <link linkend="BonoboActivationPluginObject">BonoboActivationPluginObject</link>;
<link linkend="void">void</link>                <link linkend="bonobo-activation-plugin-use">bonobo_activation_plugin_use</link>        (<link linkend="PortableServer-Servant">PortableServer_Servant</link> servant,
                                                         <link linkend="gpointer">gpointer</link> impl_ptr);
<link linkend="void">void</link>                <link linkend="bonobo-activation-plugin-unuse">bonobo_activation_plugin_unuse</link>      (<link linkend="gpointer">gpointer</link> impl_ptr);
</synopsis>
</refsynopsisdiv>









<refsect1 id="bonobo-activation-Registration.description" role="desc">
<title role="desc.title">Description</title>
<para>
When writing a component which can be activated through
Bonobo Activation by clients, you need to be register your component
to Bonobo Activation once it is created.
</para>
</refsect1>

<refsect1 id="bonobo-activation-Registration.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="Bonobo-RegistrationResult" role="enum">
<title>enum Bonobo_RegistrationResult</title>
<indexterm zone="Bonobo-RegistrationResult"><primary sortas="Bonobo_RegistrationResult">Bonobo_RegistrationResult</primary></indexterm><programlisting>typedef enum {
  Bonobo_ACTIVATION_REG_SUCCESS,
  Bonobo_ACTIVATION_REG_NOT_LISTED,
  Bonobo_ACTIVATION_REG_ALREADY_ACTIVE,
  Bonobo_ACTIVATION_REG_ERROR
} Bonobo_RegistrationResult;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-activation-unregister-active-server" role="function">
<title>bonobo_activation_unregister_active_server ()</title>
<indexterm zone="bonobo-activation-unregister-active-server"><primary sortas="bonobo_activation_unregister_active_server">bonobo_activation_unregister_active_server</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_unregister_active_server
                                                        (const <link linkend="char">char</link> *iid,
                                                         <link linkend="CORBA-Object">CORBA_Object</link> obj);</programlisting>
<para>
Unregisters <parameter>obj</parameter> with <parameter>iid</parameter> with the local bonobo-activation-server
daemon.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>iid</parameter>&#160;:</term>
<listitem><simpara> IID of the server to unregister.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> CORBA::Object to unregister.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-registration-env-free" role="function">
<title>bonobo_activation_registration_env_free ()</title>
<indexterm zone="bonobo-activation-registration-env-free"><primary sortas="bonobo_activation_registration_env_free">bonobo_activation_registration_env_free</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_registration_env_free
                                                        (<link linkend="GSList">GSList</link> *reg_env);</programlisting>
<para>
Frees the registration environment list, <parameter>reg_env</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>reg_env</parameter>&#160;:</term>
<listitem><simpara> a GSList pointer.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-registration-env-set" role="function">
<title>bonobo_activation_registration_env_set ()</title>
<indexterm zone="bonobo-activation-registration-env-set"><primary sortas="bonobo_activation_registration_env_set">bonobo_activation_registration_env_set</primary></indexterm><programlisting><link linkend="GSList">GSList</link> *            bonobo_activation_registration_env_set
                                                        (<link linkend="GSList">GSList</link> *reg_env,
                                                         const <link linkend="char">char</link> *name,
                                                         const <link linkend="char">char</link> *value);</programlisting>
<para>
Sets the environment variable <parameter>name</parameter> to <parameter>value</parameter> in the
registration environment list <parameter>reg_env</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>reg_env</parameter>&#160;:</term>
<listitem><simpara> a GSList pointer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the env variable (must not be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> the value of the env variable (may be <link linkend="NULL--CAPS"><literal>NULL</literal></link>).
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new start of <parameter>reg_env</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-registration-env-set-global" role="function">
<title>bonobo_activation_registration_env_set_global ()</title>
<indexterm zone="bonobo-activation-registration-env-set-global"><primary sortas="bonobo_activation_registration_env_set_global">bonobo_activation_registration_env_set_global</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_registration_env_set_global
                                                        (<link linkend="GSList">GSList</link> *reg_env,
                                                         <link linkend="gboolean">gboolean</link> append_if_existing);</programlisting>
<para>
Sets the global registration environment list with the
contents of <parameter>reg_env</parameter>. If <parameter>append_if_existing</parameter> is set to
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link>, the an existing global list will be overwritten.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>reg_env</parameter>&#160;:</term>
<listitem><simpara> a GSList pointer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>append_if_existing</parameter>&#160;:</term>
<listitem><simpara> whether or not to append to the global list.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-register-active-server" role="function">
<title>bonobo_activation_register_active_server ()</title>
<indexterm zone="bonobo-activation-register-active-server"><primary sortas="bonobo_activation_register_active_server">bonobo_activation_register_active_server</primary></indexterm><programlisting><link linkend="Bonobo-RegistrationResult">Bonobo_RegistrationResult</link>  bonobo_activation_register_active_server
                                                        (const <link linkend="char">char</link> *iid,
                                                         <link linkend="CORBA-Object">CORBA_Object</link> obj,
                                                         <link linkend="GSList">GSList</link> *reg_env);</programlisting>
<para>
Registers <parameter>obj</parameter> with <parameter>iid</parameter> with the local bonobo-activation-server
daemon.
</para>
<para>
If <parameter>reg_env</parameter> is not <link linkend="NULL--CAPS"><literal>NULL</literal></link>, <parameter>obj</parameter> will be registered in such a
way that if a client who's environment differs from the
environment specified in <parameter>reg_env</parameter>, then another attempt
to activate <parameter>iid</parameter> will not result in a reference to <parameter>obj</parameter>
being returned, but rather another instance of <parameter>iid</parameter> being
activated.
</para>
<para>
So, for example, you can ensure that a seperate instance
of the component is activated for each distinct X display
(and screen) by:
</para>
<para>
<informalexample><programlisting>
  display_name = gdk_display_get_name (gdk_display_get_default());
  reg_env = bonobo_activation_registration_env_set (
                             reg_env, "DISPLAY", display_name);
  bonobo_activation_register_active_server (iid, active_server, reg_env);
  bonobo_activation_registration_env_free (reg_env);
</programlisting></informalexample>
</para>
<para>
If <parameter>reg_env</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, the global registration environment
list will be used if it is set. See
<link linkend="bonobo-activation-registration-env-set-global"><function>bonobo_activation_registration_env_set_global()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>iid</parameter>&#160;:</term>
<listitem><simpara> IID of the server to register.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>obj</parameter>&#160;:</term>
<listitem><simpara> CORBA::Object to register.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>reg_env</parameter>&#160;:</term>
<listitem><simpara> the registration environment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> status of the registration.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-iid-get" role="function">
<title>bonobo_activation_iid_get ()</title>
<indexterm zone="bonobo-activation-iid-get"><primary sortas="bonobo_activation_iid_get">bonobo_activation_iid_get</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_activation_iid_get           (void);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboActivationPlugin" role="struct">
<title>BonoboActivationPlugin</title>
<indexterm zone="BonoboActivationPlugin"><primary sortas="BonoboActivationPlugin">BonoboActivationPlugin</primary></indexterm><programlisting>typedef struct {
	const BonoboActivationPluginObject *plugin_object_list;
	const char *description;
        gpointer dummy[8];
} BonoboActivationPlugin;
</programlisting>
<para>
Components which want to be activated as
shared libraries must export an BonoboActivationPlugin
structure of name <structname>Bonobo_Plugin_info</structname>.
An exmaple of how to use it folows:
<programlisting>
static CORBA_Object
hi_shlib_make_object (PortableServer_POA poa,
                      const char *iid,
                      gpointer impl_ptr,
                      CORBA_Environment *ev)
{
        CORBA_Object object_ref;
        object_ref = impl_Hi__create (poa, ev);
        if (object_ref == CORBA_OBJECT_NIL
            || ev->_major != CORBA_NO_EXCEPTION) {
                printf ("Server cannot get objref\n");
                return CORBA_OBJECT_NIL;
        }
        bonobo_activation_plugin_use (poa, impl_ptr);
        return object_ref;
}
static const BonoboActivationPluginObject hi_plugin_list[] = {
        {
                "OAFIID:Hi:20000923",
                hi_shlib_make_object
        },
        {
                NULL
  	}
};
const BonoboActivationPlugin Bonobo_Plugin_info = {
        hi_plugin_list,
        "Hi example"
};
</programlisting>
</para></refsect2>
<refsect2 id="BonoboActivationPluginObject" role="struct">
<title>BonoboActivationPluginObject</title>
<indexterm zone="BonoboActivationPluginObject"><primary sortas="BonoboActivationPluginObject">BonoboActivationPluginObject</primary></indexterm><programlisting>typedef struct {
	const char *iid;

	/* This routine should call bonobo_activation_plugin_use(servant, impl_ptr), 
         * as should all routines which activate CORBA objects
	 * implemented by this shared library. This needs to be done 
         * before making any CORBA calls on the object, or
	 * passing that object around. First thing after servant creation 
         * always works. :) 
         */

        CORBA_Object (*activate) (PortableServer_POA poa,
                                  const char *iid, 
                                  gpointer impl_ptr,	/* This pointer should be stored by the implementation
                                                         * to be passed to bonobo_activation_plugin_unuse() in the 
                                                         * implementation's destruction routine. */
				  CORBA_Environment *ev);
        gpointer dummy[4];
} BonoboActivationPluginObject;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-activation-plugin-use" role="function">
<title>bonobo_activation_plugin_use ()</title>
<indexterm zone="bonobo-activation-plugin-use"><primary sortas="bonobo_activation_plugin_use">bonobo_activation_plugin_use</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_plugin_use        (<link linkend="PortableServer-Servant">PortableServer_Servant</link> servant,
                                                         <link linkend="gpointer">gpointer</link> impl_ptr);</programlisting>
<para>
You should call this routine to activate a shared library-based 
CORBA Object. It will be called by OAF if the component exports 
correctly an <link linkend="BonoboActivationPlugin"><literal>BonoboActivationPlugin</literal></link> structure named "Bonobo_Plugin_info".</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>servant</parameter>&#160;:</term>
<listitem><simpara> The servant that was created
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>impl_ptr</parameter>&#160;:</term>
<listitem><simpara> The impl_ptr that was passed to the original activation routine
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-activation-plugin-unuse" role="function">
<title>bonobo_activation_plugin_unuse ()</title>
<indexterm zone="bonobo-activation-plugin-unuse"><primary sortas="bonobo_activation_plugin_unuse">bonobo_activation_plugin_unuse</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_activation_plugin_unuse      (<link linkend="gpointer">gpointer</link> impl_ptr);</programlisting>
<para>
Side effects: May arrange for the shared library that the
implementation is in to be unloaded.
</para>
<para>
When a shlib plugin for a CORBA object is destroying an
implementation, it should call this function to make sure that the
shared library is unloaded as needed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>impl_ptr</parameter>&#160;:</term>
<listitem><simpara> The impl_ptr that was passed to the activation routine
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
