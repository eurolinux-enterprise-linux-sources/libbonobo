<refentry id="libbonobo-bonobo-exception">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-exception.top_of_page">bonobo-exception</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-exception</refname>
<refpurpose>maps CORBA exceptions to user readable text, + helper macros</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-exception.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
#define             <link linkend="bonobo-exception-set">bonobo_exception_set</link>                (opt_ev,repo_id)
#define             <link linkend="bonobo-return-if-fail">bonobo_return_if_fail</link>               (expr,opt_ev)
#define             <link linkend="bonobo-return-val-if-fail">bonobo_return_val_if_fail</link>           (expr,val,opt_ev)
#define             <link linkend="BONOBO-EX--CAPS">BONOBO_EX</link>                           (ev)
#define             <link linkend="BONOBO-USER-EX--CAPS">BONOBO_USER_EX</link>                      (ev,id)
#define             <link linkend="BONOBO-EX-REPOID--CAPS">BONOBO_EX_REPOID</link>                    (ev)
#define             <link linkend="BONOBO-RET-EX--CAPS">BONOBO_RET_EX</link>                       (ev)
#define             <link linkend="BONOBO-RET-VAL-EX--CAPS">BONOBO_RET_VAL_EX</link>                   (ev,v)
<link linkend="char">char</link> *              (<link linkend="BonoboExceptionFn">*BonoboExceptionFn</link>)                (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="char">char</link> *              <link linkend="bonobo-exception-get-text">bonobo_exception_get_text</link>           (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="char">char</link> *              <link linkend="bonobo-exception-repoid-to-text">bonobo_exception_repoid_to_text</link>     (const <link linkend="char">char</link> *repo_id);
<link linkend="void">void</link>                <link linkend="bonobo-exception-add-handler-str">bonobo_exception_add_handler_str</link>    (const <link linkend="char">char</link> *repo_id,
                                                         const <link linkend="char">char</link> *str);
<link linkend="void">void</link>                <link linkend="bonobo-exception-add-handler-fn">bonobo_exception_add_handler_fn</link>     (const <link linkend="char">char</link> *repo_id,
                                                         <link linkend="BonoboExceptionFn">BonoboExceptionFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);
<link linkend="void">void</link>                <link linkend="bonobo-exception-general-error-set">bonobo_exception_general_error_set</link>  (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> opt_deriv,
                                                         const <link linkend="char">char</link> *format,
                                                         ...);
const <link linkend="char">char</link> *        <link linkend="bonobo-exception-general-error-get">bonobo_exception_general_error_get</link>  (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-exception.description" role="desc">
<title role="desc.title">Description</title>
<para>
This module contains some useful helper functions
that can be used to set various exceptions inside your
CORBA methods. It also contains code to map between
complex CORBA_Environment exceptions and helpful
strings suitable for display to the user.
</para>
<para>
Typically to test for exceptions the BONOBO_EX macro
is used thus:
  <example>
     <title>Bonobo exception trapping and reporting</title>
     <programlisting>
int
do_something (CORBA_Environment *ev)
{
	...
	retval = Foo_Baa_method (object, ev);
	if (BONOBO_EX (ev)) {
		if (BONOBO_USER_EX (ev, ex_CosNaming_NamingContext_NotFound)) {
		        g_warning ("Not found");
		} else {
		        char *str;
			g_warning ("Exception '%s' occured",
				(str = bonobo_exception_get_text (ev)));
			g_free (str);
		}
		return -1;
	}
	...
}
     </programlisting>
  </example>
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-exception.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="bonobo-exception-set" role="macro">
<title>bonobo_exception_set()</title>
<indexterm zone="bonobo-exception-set"><primary sortas="bonobo_exception_set">bonobo_exception_set</primary></indexterm><programlisting>#define             bonobo_exception_set(opt_ev,repo_id)</programlisting>
<para>
This macro sets the stateless user exception with <parameter>repo_id</parameter> on
<parameter>opt_ev</parameter> or warns if <parameter>opt_ev</parameter> == NULL
</para><variablelist role="params">
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>an optional corba exception environment.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>repo_id</parameter>&#160;:</term>
<listitem><simpara>repoid of the exception to set.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-return-if-fail" role="macro">
<title>bonobo_return_if_fail()</title>
<indexterm zone="bonobo-return-if-fail"><primary sortas="bonobo_return_if_fail">bonobo_return_if_fail</primary></indexterm><programlisting>#define             bonobo_return_if_fail(expr,opt_ev)</programlisting>
<para>
this macro is used for bonobo preconditons on argument types,
usualy inside skels if <parameter>expr</parameter> is FALSE a warning is printed and
<parameter>opt_ev</parameter> is set to ex_Bonobo_BadArg.
</para><variablelist role="params">
<varlistentry><term><parameter>expr</parameter>&#160;:</term>
<listitem><simpara>an expression that should be true
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>an optional corba exception environment.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-return-val-if-fail" role="macro">
<title>bonobo_return_val_if_fail()</title>
<indexterm zone="bonobo-return-val-if-fail"><primary sortas="bonobo_return_val_if_fail">bonobo_return_val_if_fail</primary></indexterm><programlisting>#define             bonobo_return_val_if_fail(expr,val,opt_ev)</programlisting>
<para>
this macro is used for bonobo preconditons on argument types,
usualy inside skels if <parameter>expr</parameter> is FALSE a warning is printed and
<parameter>opt_ev</parameter> is set to ex_Bonobo_BadArg.
</para><variablelist role="params">
<varlistentry><term><parameter>expr</parameter>&#160;:</term>
<listitem><simpara>an expression that should be true
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>val</parameter>&#160;:</term>
<listitem><simpara>a value to return on failure.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>an optional corba exception environment.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-EX--CAPS" role="macro">
<title>BONOBO_EX()</title>
<indexterm zone="BONOBO-EX--CAPS"><primary sortas="BONOBO_EX">BONOBO_EX</primary></indexterm><programlisting>#define BONOBO_EX(ev)         ((ev) != NULL &amp;&amp; (ev)-&gt;_major != CORBA_NO_EXCEPTION)
</programlisting>
<para>
This macro returns TRUE if <parameter>ev</parameter> flags an exception.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-USER-EX--CAPS" role="macro">
<title>BONOBO_USER_EX()</title>
<indexterm zone="BONOBO-USER-EX--CAPS"><primary sortas="BONOBO_USER_EX">BONOBO_USER_EX</primary></indexterm><programlisting>#define             BONOBO_USER_EX(ev,id)</programlisting>
<para>
This macro returns TRUE if <parameter>ev</parameter> contains a user exception
of type <parameter>id</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>the repo_id of the exception
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-EX-REPOID--CAPS" role="macro">
<title>BONOBO_EX_REPOID()</title>
<indexterm zone="BONOBO-EX-REPOID--CAPS"><primary sortas="BONOBO_EX_REPOID">BONOBO_EX_REPOID</primary></indexterm><programlisting>#define BONOBO_EX_REPOID(ev)  (ev)-&gt;_id
</programlisting>
<para>
Returns the repoid string of exception <parameter>ev</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>a CORBA exception
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-RET-EX--CAPS" role="macro">
<title>BONOBO_RET_EX()</title>
<indexterm zone="BONOBO-RET-EX--CAPS"><primary sortas="BONOBO_RET_EX">BONOBO_RET_EX</primary></indexterm><programlisting>#define             BONOBO_RET_EX(ev)</programlisting>
<para>
returns if there is an exception flagged in <parameter>ev</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-RET-VAL-EX--CAPS" role="macro">
<title>BONOBO_RET_VAL_EX()</title>
<indexterm zone="BONOBO-RET-VAL-EX--CAPS"><primary sortas="BONOBO_RET_VAL_EX">BONOBO_RET_VAL_EX</primary></indexterm><programlisting>#define             BONOBO_RET_VAL_EX(ev,v)</programlisting>
<para>
returns <parameter>v</parameter> if there is an exception flagged in <parameter>ev</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>the value to return
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboExceptionFn" role="function">
<title>BonoboExceptionFn ()</title>
<indexterm zone="BonoboExceptionFn"><primary sortas="BonoboExceptionFn">BonoboExceptionFn</primary></indexterm><programlisting><link linkend="char">char</link> *              (*BonoboExceptionFn)                (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
The prototype for user registerable exception decoders.
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>the exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data to be passed to the function
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a g_malloc'd copy of a translated user readable error string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-get-text" role="function">
<title>bonobo_exception_get_text ()</title>
<indexterm zone="bonobo-exception-get-text"><primary sortas="bonobo_exception_get_text">bonobo_exception_get_text</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_exception_get_text           (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Returns a user readable description of the exception.  First
checks <parameter>ev</parameter> against builtin Bonobo exceptions, then falls back to
exception names added through bonobo_exception_add_handler_str
or bonobo_exception_add_handler_fn.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> the corba environment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A g_malloc'd description, which the caller must free.
NULL is never returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-repoid-to-text" role="function">
<title>bonobo_exception_repoid_to_text ()</title>
<indexterm zone="bonobo-exception-repoid-to-text"><primary sortas="bonobo_exception_repoid_to_text">bonobo_exception_repoid_to_text</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_exception_repoid_to_text     (const <link linkend="char">char</link> *repo_id);</programlisting>
<para>
This maps builtin bonobo exceptions that the system
knows about to user readable strings.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&#160;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a user string or NULL for an unknown repo_id
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-add-handler-str" role="function">
<title>bonobo_exception_add_handler_str ()</title>
<indexterm zone="bonobo-exception-add-handler-str"><primary sortas="bonobo_exception_add_handler_str">bonobo_exception_add_handler_str</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_exception_add_handler_str    (const <link linkend="char">char</link> *repo_id,
                                                         const <link linkend="char">char</link> *str);</programlisting>
<para>
This routine adds a simple string mapping for an exception
with repository id <parameter>repo_id</parameter>, such that when we call
bonobo_exception_get_text on an exception of id <parameter>repo_id</parameter> we
get <parameter>str</parameter> back.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&#160;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara> the user readable, translated exception text.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-add-handler-fn" role="function">
<title>bonobo_exception_add_handler_fn ()</title>
<indexterm zone="bonobo-exception-add-handler-fn"><primary sortas="bonobo_exception_add_handler_fn">bonobo_exception_add_handler_fn</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_exception_add_handler_fn     (const <link linkend="char">char</link> *repo_id,
                                                         <link linkend="BonoboExceptionFn">BonoboExceptionFn</link> fn,
                                                         <link linkend="gpointer">gpointer</link> user_data,
                                                         <link linkend="GDestroyNotify">GDestroyNotify</link> destroy_fn);</programlisting>
<para>
This routine adds a method mapping for an exception
with repository id <parameter>repo_id</parameter>, such that when we call
bonobo_exception_get_text on an exception of id <parameter>repo_id</parameter>
the <parameter>fn</parameter> is called and passed <parameter>user_data</parameter>.
When the handler is removed the <parameter>destroy_fn</parameter> is called
on its <parameter>user_data</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>repo_id</parameter>&#160;:</term>
<listitem><simpara> exception repository id
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fn</parameter>&#160;:</term>
<listitem><simpara> function to make exception human readable
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> the user data
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>destroy_fn</parameter>&#160;:</term>
<listitem><simpara> user data destroy function or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-general-error-set" role="function">
<title>bonobo_exception_general_error_set ()</title>
<indexterm zone="bonobo-exception-general-error-set"><primary sortas="bonobo_exception_general_error_set">bonobo_exception_general_error_set</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_exception_general_error_set  (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> opt_deriv,
                                                         const <link linkend="char">char</link> *format,
                                                         ...);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_deriv</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>format</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-exception-general-error-get" role="function">
<title>bonobo_exception_general_error_get ()</title>
<indexterm zone="bonobo-exception-general-error-get"><primary sortas="bonobo_exception_general_error_get">bonobo_exception_general_error_get</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_exception_general_error_get  (<link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
