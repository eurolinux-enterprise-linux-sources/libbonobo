<refentry id="libbonobo-bonobo-event-source">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-event-source.top_of_page">bonobo-event-source</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-event-source</refname>
<refpurpose>An Event Source where clients can connect to listen to events.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-event-source.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="BonoboEventSource">BonoboEventSource</link> * <link linkend="bonobo-event-source-new">bonobo_event_source_new</link>             (void);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-notify-listeners">bonobo_event_source_notify_listeners</link>
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *event_name,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *opt_value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-notify-listeners-full">bonobo_event_source_notify_listeners_full</link>
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *type,
                                                         const <link linkend="char">char</link> *subtype,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *opt_value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-client-remove-listener">bonobo_event_source_client_remove_listener</link>
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="Bonobo-Listener">Bonobo_Listener</link> listener,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-client-add-listener">bonobo_event_source_client_add_listener</link>
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-event-source-has-listener">bonobo_event_source_has_listener</link>    (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *event_name);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-client-add-listener-closure">bonobo_event_source_client_add_listener_closure</link>
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="GClosure">GClosure</link> *callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Listener">Bonobo_Listener</link>     <link linkend="bonobo-event-source-client-add-listener-full">bonobo_event_source_client_add_listener_full</link>
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="GClosure">GClosure</link> *callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                <link linkend="bonobo-event-source-ignore-listeners">bonobo_event_source_ignore_listeners</link>
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-event-source.description" role="desc">
<title role="desc.title">Description</title>
<para>
An event source object is responsible for channeling the emission
of signals on an object to the appropriate attached listeners.
The API is extremely simple and allows implementations to notify
their listeners of a new event occuring.
</para>
<para>
To notify a listener, you need to construct a textual string,
this is done by the <function>bonobo_event</function> functions
( see <link linkend="BonoboListener"><type>BonoboListener</type></link> ) ':' delimiting the fields. It is reccommended
that the IDL module path of the interface be used as the first
part of the string. This is because many interfaces can be aggregated
together and need to share the same event namespace without conflicts.
So for example the bonobo property bag notification code
uses the IDL path "Bonobo/Property" the "change" kind and sets the
sub-type to the property name:
  <example>
    <title>An example event source notification</title>
    <programlisting>
static void
notify_listeners (BonoboPropertyBag *pb,
		  BonoboProperty    *prop,
		  const BonoboArg   *new_value,
		  CORBA_Environment *opt_ev)
{
	if (prop->flags &amp; BONOBO_PROPERTY_NO_LISTENING)
		return;
	bonobo_event_source_notify_listeners_full (pb->es,
						   "Bonobo/Property",
						   "change", prop->name,
						   new_value, opt_ev);
}
    </programlisting>
  </example>
  Of course, you need to notify the listener with a valid
BonoboArg containing the event data, this could easily contain
a structure. eg.
  <example>
     <title>Passing a structure in an event</title>
     <programlisting>
module GNOME {
	module Foo {
		struct BaaEvent {
			double a;
			string b;
			long   c;
		};
	};
};
     </programlisting>
     <programlisting>
static void
fire_event (BonoboEventSource *on_source,
            double             a_double,
	    char              *a_string,
	    long               a_float,
	    CORBA_Environment *opt_ev)
{
	CORBA_any any;
	GNOME_Foo_BaaEvent e;
	e.a = a_double;
	e.b = a_string;
	e.c = a_float;
	any->_type = TC_GNOME_Foo_BaaEvent;
	any->_data = &amp;e;
	bonobo_event_source_notify_listeners_full (
	   on_source, "GNOME/Foo", "event", NULL,
	   &amp;any, opt_ev);
}
     </programlisting>
  </example>
  NB. it is reccommended that you make it clear that the event
structure is intended for use with the <link linkend="BonoboEventSource"><type>BonoboEventSource</type></link> /
<link linkend="BonoboListener"><type>BonoboListener</type></link> by naming it XYZEvent, ie. with the 'Event'
suffix.
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-event-source.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="bonobo-event-source-new" role="function">
<title>bonobo_event_source_new ()</title>
<indexterm zone="bonobo-event-source-new"><primary sortas="bonobo_event_source_new">bonobo_event_source_new</primary></indexterm><programlisting><link linkend="BonoboEventSource">BonoboEventSource</link> * bonobo_event_source_new             (void);</programlisting>
<para>
Creates a new BonoboEventSource object.  Typically this
object will be exposed to clients through CORBA and they
will register and unregister functions to be notified
of events that this EventSource generates.
</para>
<para>
To notify clients of an event, use the <link linkend="bonobo-event-source-notify-listeners"><function>bonobo_event_source_notify_listeners()</function></link>
function.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A new <link linkend="BonoboEventSource"><type>BonoboEventSource</type></link> server object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-notify-listeners" role="function">
<title>bonobo_event_source_notify_listeners ()</title>
<indexterm zone="bonobo-event-source-notify-listeners"><primary sortas="bonobo_event_source_notify_listeners">bonobo_event_source_notify_listeners</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_notify_listeners
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *event_name,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *opt_value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This will notify all clients that have registered with this EventSource
(through the addListener or addListenerWithMask methods) of the availability
of the event named <parameter>event_name</parameter>.  The <parameter>value</parameter> CORBA::any value is passed to
all listeners.
</para>
<para>
<parameter>event_name</parameter> can not contain comma separators, as commas are used to
separate the various event names.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_source</parameter>&#160;:</term>
<listitem><simpara> the Event Source that will emit the event.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara> Name of the event being emitted
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_value</parameter>&#160;:</term>
<listitem><simpara> A CORBA_any value that contains the data that is passed
to interested clients, or NULL for an empty value
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> A CORBA_Environment where a failure code can be returned, can be NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-notify-listeners-full" role="function">
<title>bonobo_event_source_notify_listeners_full ()</title>
<indexterm zone="bonobo-event-source-notify-listeners-full"><primary sortas="bonobo_event_source_notify_listeners_full">bonobo_event_source_notify_listeners_full</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_notify_listeners_full
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *path,
                                                         const <link linkend="char">char</link> *type,
                                                         const <link linkend="char">char</link> *subtype,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *opt_value,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_source</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subtype</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-client-remove-listener" role="function">
<title>bonobo_event_source_client_remove_listener ()</title>
<indexterm zone="bonobo-event-source-client-remove-listener"><primary sortas="bonobo_event_source_client_remove_listener">bonobo_event_source_client_remove_listener</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_client_remove_listener
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="Bonobo-Listener">Bonobo_Listener</link> listener,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>listener</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-client-add-listener" role="function">
<title>bonobo_event_source_client_add_listener ()</title>
<indexterm zone="bonobo-event-source-client-add-listener"><primary sortas="bonobo_event_source_client_add_listener">bonobo_event_source_client_add_listener</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_client_add_listener
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_mask</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-has-listener" role="function">
<title>bonobo_event_source_has_listener ()</title>
<indexterm zone="bonobo-event-source-has-listener"><primary sortas="bonobo_event_source_has_listener">bonobo_event_source_has_listener</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_event_source_has_listener    (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source,
                                                         const <link linkend="char">char</link> *event_name);</programlisting>
<para>
This method determines if there are any listeners for
the event to be broadcast. This can be used to detect
whether it is worth constructing a potentialy expensive
state update, before sending it to no-one.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_source</parameter>&#160;:</term>
<listitem><simpara> the Event Source that will emit the event.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara> Name of the event being emitted
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if it's worth sending, else FALSE
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-client-add-listener-closure" role="function">
<title>bonobo_event_source_client_add_listener_closure ()</title>
<indexterm zone="bonobo-event-source-client-add-listener-closure"><primary sortas="bonobo_event_source_client_add_listener_closure">bonobo_event_source_client_add_listener_closure</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_client_add_listener_closure
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="GClosure">GClosure</link> *callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_mask</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-client-add-listener-full" role="function">
<title>bonobo_event_source_client_add_listener_full ()</title>
<indexterm zone="bonobo-event-source-client-add-listener-full"><primary sortas="bonobo_event_source_client_add_listener_full">bonobo_event_source_client_add_listener_full</primary></indexterm><programlisting><link linkend="Bonobo-Listener">Bonobo_Listener</link>     bonobo_event_source_client_add_listener_full
                                                        (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="GClosure">GClosure</link> *callback,
                                                         const <link linkend="char">char</link> *opt_mask,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_mask</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-source-ignore-listeners" role="function">
<title>bonobo_event_source_ignore_listeners ()</title>
<indexterm zone="bonobo-event-source-ignore-listeners"><primary sortas="bonobo_event_source_ignore_listeners">bonobo_event_source_ignore_listeners</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_event_source_ignore_listeners
                                                        (<link linkend="BonoboEventSource">BonoboEventSource</link> *event_source);</programlisting>
<para>
Instructs the event source to de-register any listeners
that are added from the global running context.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_source</parameter>&#160;:</term>
<listitem><simpara> 
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libbonobo-bonobo-event-source.see-also">
<title>See Also</title>
<para>
  <link linkend="BonoboListener"><type>BonoboListener</type></link> <link linkend="BonoboArg"><type>BonoboArg</type></link>
</para>
</refsect1>

</refentry>
