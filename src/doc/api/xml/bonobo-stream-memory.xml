<refentry id="libbonobo-bonobo-stream-memory">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-stream-memory.top_of_page">BonoboStreamMem</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboStreamMem</refname>
<refpurpose>In-memory implementation of Bonobo::Stream interface.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-stream-memory.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboStreamMem"/>
<synopsis>
                    <link linkend="BonoboStreamMem-struct">BonoboStreamMem</link>;
                    <link linkend="BonoboStreamMemClass">BonoboStreamMemClass</link>;
<link linkend="BonoboStreamMem">BonoboStreamMem</link> *   <link linkend="bonobo-stream-mem-construct">bonobo_stream_mem_construct</link>         (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem,
                                                         const <link linkend="char">char</link> *buffer,
                                                         <link linkend="size-t">size_t</link> size,
                                                         <link linkend="gboolean">gboolean</link> read_only,
                                                         <link linkend="gboolean">gboolean</link> resizable);
<link linkend="BonoboObject">BonoboObject</link> *      <link linkend="bonobo-stream-mem-create">bonobo_stream_mem_create</link>            (const <link linkend="char">char</link> *buffer,
                                                         <link linkend="size-t">size_t</link> size,
                                                         <link linkend="gboolean">gboolean</link> read_only,
                                                         <link linkend="gboolean">gboolean</link> resizable);
const <link linkend="char">char</link> *        <link linkend="bonobo-stream-mem-get-buffer">bonobo_stream_mem_get_buffer</link>        (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);
<link linkend="size-t">size_t</link>              <link linkend="bonobo-stream-mem-get-size">bonobo_stream_mem_get_size</link>          (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonobo-bonobo-stream-memory.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboStreamMem
</synopsis>
</refsect1>








<refsect1 id="libbonobo-bonobo-stream-memory.description" role="desc">
<title role="desc.title">Description</title>
<para>
   The BonoboStreamMem is an implementation of the
   IDL:Bonobo/Stream:1.0 interface.  This implementation allows an
   in-memory buffer to be exposed as a IDL:Bonobo/Stream:1.0 to
   clients.
</para>
<para>
   Here is a sample way of exposing a C string as an
   IDL:Bonobo/Stream:1.0:
   <example>
     <title>Sample BonoboStreamMem usage</title>
     <programlisting>
BonoboStream *make_bonobo_stream_on_string (char *string)
{
    return bonobo_stream_mem_create (string, strlen (string), TRUE, FALSE);
}
     </programlisting>
   </example>
   This example will make the string argument be exposed as a CORBA
   stream.  </para>
</refsect1>

<refsect1 id="libbonobo-bonobo-stream-memory.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboStreamMem-struct" role="struct">
<title>BonoboStreamMem</title>
<indexterm zone="BonoboStreamMem-struct"><primary sortas="BonoboStreamMem">BonoboStreamMem</primary></indexterm><programlisting>typedef struct _BonoboStreamMem BonoboStreamMem;</programlisting>
<para>
</para></refsect2>
<refsect2 id="BonoboStreamMemClass" role="struct">
<title>BonoboStreamMemClass</title>
<indexterm zone="BonoboStreamMemClass"><primary sortas="BonoboStreamMemClass">BonoboStreamMemClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass parent_class;

	POA_Bonobo_Stream__epv epv;

	char           *(*get_buffer) (BonoboStreamMem *stream_mem);
	size_t          (*get_size)   (BonoboStreamMem *stream_mem);
} BonoboStreamMemClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="bonobo-stream-mem-construct" role="function">
<title>bonobo_stream_mem_construct ()</title>
<indexterm zone="bonobo-stream-mem-construct"><primary sortas="bonobo_stream_mem_construct">bonobo_stream_mem_construct</primary></indexterm><programlisting><link linkend="BonoboStreamMem">BonoboStreamMem</link> *   bonobo_stream_mem_construct         (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem,
                                                         const <link linkend="char">char</link> *buffer,
                                                         <link linkend="size-t">size_t</link> size,
                                                         <link linkend="gboolean">gboolean</link> read_only,
                                                         <link linkend="gboolean">gboolean</link> resizable);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>read_only</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resizable</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-mem-create" role="function">
<title>bonobo_stream_mem_create ()</title>
<indexterm zone="bonobo-stream-mem-create"><primary sortas="bonobo_stream_mem_create">bonobo_stream_mem_create</primary></indexterm><programlisting><link linkend="BonoboObject">BonoboObject</link> *      bonobo_stream_mem_create            (const <link linkend="char">char</link> *buffer,
                                                         <link linkend="size-t">size_t</link> size,
                                                         <link linkend="gboolean">gboolean</link> read_only,
                                                         <link linkend="gboolean">gboolean</link> resizable);</programlisting>
<para>
Creates a new BonoboStreamMem object.
</para>
<para>
If <parameter>buffer</parameter> is non-<link linkend="NULL--CAPS"><literal>NULL</literal></link>, <parameter>size</parameter> bytes are copied from it into a new
buffer. If <parameter>buffer</parameter> is <link linkend="NULL--CAPS"><literal>NULL</literal></link>, a new buffer of size <parameter>size</parameter> is created
and filled with zero bytes.
</para>
<para>
When data is read out of or (if <parameter>read_only</parameter> is FALSE) written into
the returned BonoboStream object, the <link linkend="read"><function>read()</function></link> and <link linkend="write"><function>write()</function></link> operations
operate on the new buffer. If <parameter>resizable</parameter> is TRUE, writing or seeking
past the end of the buffer will cause the buffer to be expanded (with
the new space zero-filled for a seek).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> The data for which a BonoboStreamMem object is to be created.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> The size in bytes of <parameter>buffer</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>read_only</parameter>&#160;:</term>
<listitem><simpara> Specifies whether or not the returned BonoboStreamMem
object should allow <link linkend="write"><function>write()</function></link> operations.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resizable</parameter>&#160;:</term>
<listitem><simpara> Whether or not the buffer should be resized as needed.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the constructed BonoboStream object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-mem-get-buffer" role="function">
<title>bonobo_stream_mem_get_buffer ()</title>
<indexterm zone="bonobo-stream-mem-get-buffer"><primary sortas="bonobo_stream_mem_get_buffer">bonobo_stream_mem_get_buffer</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_stream_mem_get_buffer        (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);</programlisting>
<para>
Returns the buffer associated with a BonoboStreamMem. If the stream
is set to automatically resize itself, this buffer is only guaranteed
to stay valid until the next write operation on the stream.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&#160;:</term>
<listitem><simpara> a BonoboStreamMem
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a buffer containing the data written to the stream (or
the data the stream was initialized with if nothing has been written).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-mem-get-size" role="function">
<title>bonobo_stream_mem_get_size ()</title>
<indexterm zone="bonobo-stream-mem-get-size"><primary sortas="bonobo_stream_mem_get_size">bonobo_stream_mem_get_size</primary></indexterm><programlisting><link linkend="size-t">size_t</link>              bonobo_stream_mem_get_size          (<link linkend="BonoboStreamMem">BonoboStreamMem</link> *stream_mem);</programlisting>
<para>
Returns the size of the data associated with a BonoboStreamMem
see bonobo_stream_mem_get_buffer</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream_mem</parameter>&#160;:</term>
<listitem><simpara> a BonoboStreamMem
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the size.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libbonobo-bonobo-stream-memory.see-also">
<title>See Also</title>
<para>
  <variablelist>
    <varlistentry>
      <term><link linkend="BonoboStream"><type>BonoboStream</type></link></term>
      <listitem><para>An abstract class to implement
      IDL:Bonobo/Streams.</para></listitem>
    </varlistentry>
    <varlistentry>
      <term>IDL:Bonobo/Stream:1.0</term>
      <listitem><para>The CORBA interface implemented .</para></listitem>
    </varlistentry>
   </variablelist>
</para>
</refsect1>

</refentry>
