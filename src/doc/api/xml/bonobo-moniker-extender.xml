<refentry id="libbonobo-bonobo-moniker-extender">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-moniker-extender.top_of_page">BonoboMonikerExtender</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>BonoboMonikerExtender</refname>
<refpurpose>A way to extend arbitary monikers</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-moniker-extender.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboMonikerExtender"/>
<synopsis>
                    <link linkend="BonoboMonikerExtender-struct">BonoboMonikerExtender</link>;
                    <link linkend="BonoboMonikerExtenderClass">BonoboMonikerExtenderClass</link>;
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      (<link linkend="BonoboMonikerExtenderFn">*BonoboMonikerExtenderFn</link>)          (<link linkend="BonoboMonikerExtender">BonoboMonikerExtender</link> *extender,
                                                         const <link linkend="Bonobo-Moniker">Bonobo_Moniker</link> parent,
                                                         const <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *display_name,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="BonoboMonikerExtender">BonoboMonikerExtender</link> * <link linkend="bonobo-moniker-extender-new">bonobo_moniker_extender_new</link>     (<link linkend="BonoboMonikerExtenderFn">BonoboMonikerExtenderFn</link> resolve,
                                                         <link linkend="gpointer">gpointer</link> data);
<link linkend="Bonobo-MonikerExtender">Bonobo_MonikerExtender</link>  <link linkend="bonobo-moniker-find-extender">bonobo_moniker_find_extender</link>    (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-moniker-use-extender">bonobo_moniker_use_extender</link>         (const <link linkend="gchar">gchar</link> *extender_oafiid,
                                                         <link linkend="BonoboMoniker">BonoboMoniker</link> *moniker,
                                                         const <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonobo-bonobo-moniker-extender.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboMonikerExtender
</synopsis>
</refsect1>








<refsect1 id="libbonobo-bonobo-moniker-extender.description" role="desc">
<title role="desc.title">Description</title>
<para>
A moniker extender is used to extend the functionality of a moniker.
There are two standard moniker extenders that cannot be system wide,
since they use the oaf database to expand the scope of a moniker to
arbitrarily many interfaces. These are invoked explicitely by monikers
implementing the stream interface in the following way:
  <example>
     <title>Explicit Stream extender usage example</title>
     <programlisting>
Bonobo_Unknown
example_moniker_resolve (BonoboMoniker               *moniker,
			 const Bonobo_ResolveOptions *options,
			 const CORBA_char            *requested_interface,
			 CORBA_Environment           *ev)
{
	if (!strcmp (requested_interface, "IDL:Bonobo/Stream:1.0"))
		return handle_stream (moniker, options, ev);
	else
		return bonobo_moniker_use_extender (
			"OAFIID:Bonobo_MonikerExtender_stream",
			moniker, options, requested_interface, ev);
}
     </programlisting>
  </example>
  The moniker extender essentialy resolves 'moniker' against stream
and by some means ( not known when the moniker was written ) converts
this to a new exotic interface - via. the PersistStream interface.
</para>
<para>
All standard moniker extenders are registered by adding a fragment
like this:
  <example>
    <title>Oaf information for an extender</title>
    <programlisting>
&lt;oaf_attribute name="bonobo:moniker_extender" type="stringv"&gt;
	&lt;item value="file:"/&gt;
&lt;/oaf_attribute&gt;
    </programlisting>
  </example>
to the .oaf file. This registers the extender with the system, such
that when a moniker resolve fails an extender can be found for any
of the monikers with prefix specified in the "bonobo:moniker_extender"
stringv.
</para>
<para>
Implementing your own extender is extremely simple, much like
<link linkend="BonoboMonikerSimple"><type>BonoboMonikerSimple</type></link>.
  <example>
    <title>Oaf information for an extender</title>
    <programlisting>
Bonobo_Unknown
example_extender_resolve (BonoboMonikerExtender *extender,
			  const Bonobo_Moniker   m,
			  const Bonobo_ResolveOptions *options,
			  const CORBA_char      *display_name,
			  const CORBA_char      *requested_interface,
			  CORBA_Environment     *ev)
{
	... resolve 'm' against an interface we know it supports ...
	... then use that interface to provide requested_interface ...
}
    </programlisting>
  </example>
It is registered again in much the same way in your factory:
  <example>
    <title>Creating a new simple moniker</title>
    <programlisting>
static BonoboObject *
bonobo_std_moniker_factory (BonoboGenericFactory *this,
			    const char           *object_id,
			    void                 *data)
{
	g_return_val_if_fail (object_id != NULL, NULL);
	if (!strcmp (object_id, "OAFIID:Bonobo_MonikerExtender_file"))
		return BONOBO_OBJECT (bonobo_moniker_extender_new (
			example_extender_resolve, NULL));
	else
		return NULL;
}
    </programlisting>
  </example>
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-moniker-extender.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboMonikerExtender-struct" role="struct">
<title>BonoboMonikerExtender</title>
<indexterm zone="BonoboMonikerExtender-struct"><primary sortas="BonoboMonikerExtender">BonoboMonikerExtender</primary></indexterm><programlisting>typedef struct _BonoboMonikerExtender BonoboMonikerExtender;</programlisting>
<para>
Implements a moniker extender: Bonobo::MonikerExtender.
</para></refsect2>
<refsect2 id="BonoboMonikerExtenderClass" role="struct">
<title>BonoboMonikerExtenderClass</title>
<indexterm zone="BonoboMonikerExtenderClass"><primary sortas="BonoboMonikerExtenderClass">BonoboMonikerExtenderClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass      parent_class;

	POA_Bonobo_MonikerExtender__epv epv;
	
	BonoboMonikerExtenderFn resolve;
} BonoboMonikerExtenderClass;
</programlisting>
<para>
BonoboMonikerExtender's class.
</para></refsect2>
<refsect2 id="BonoboMonikerExtenderFn" role="function">
<title>BonoboMonikerExtenderFn ()</title>
<indexterm zone="BonoboMonikerExtenderFn"><primary sortas="BonoboMonikerExtenderFn">BonoboMonikerExtenderFn</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      (*BonoboMonikerExtenderFn)          (<link linkend="BonoboMonikerExtender">BonoboMonikerExtender</link> *extender,
                                                         const <link linkend="Bonobo-Moniker">Bonobo_Moniker</link> parent,
                                                         const <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *display_name,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Moniker resolution callback function.
</para><variablelist role="params">
<varlistentry><term><parameter>extender</parameter>&#160;:</term>
<listitem><simpara>extender (self)
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&#160;:</term>
<listitem><simpara>parent moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>options</parameter>&#160;:</term>
<listitem><simpara>resolve options
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>display_name</parameter>&#160;:</term>
<listitem><simpara>? FIXME
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requested_interface</parameter>&#160;:</term>
<listitem><simpara>? FIXME
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>the resolution resulting object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-extender-new" role="function">
<title>bonobo_moniker_extender_new ()</title>
<indexterm zone="bonobo-moniker-extender-new"><primary sortas="bonobo_moniker_extender_new">bonobo_moniker_extender_new</primary></indexterm><programlisting><link linkend="BonoboMonikerExtender">BonoboMonikerExtender</link> * bonobo_moniker_extender_new     (<link linkend="BonoboMonikerExtenderFn">BonoboMonikerExtenderFn</link> resolve,
                                                         <link linkend="gpointer">gpointer</link> data);</programlisting>
<para>
This creates a new moniker extender.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>resolve</parameter>&#160;:</term>
<listitem><simpara> the resolve function that will be used to do the extension
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> user data to be passed back to the resolve function.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the extender object
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-find-extender" role="function">
<title>bonobo_moniker_find_extender ()</title>
<indexterm zone="bonobo-moniker-find-extender"><primary sortas="bonobo_moniker_find_extender">bonobo_moniker_find_extender</primary></indexterm><programlisting><link linkend="Bonobo-MonikerExtender">Bonobo_MonikerExtender</link>  bonobo_moniker_find_extender    (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="gchar">gchar</link> *interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This routine tries to locate an extender for our moniker
by examining a registry of extenders that map new interfaces
to certain moniker names.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of the moniker we want to extend eg. 'file:'
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface</parameter>&#160;:</term>
<listitem><simpara> the interface we want to resolve to
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional corba exception environment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an appropriate extender or CORBA_OBJECT_NIL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-use-extender" role="function">
<title>bonobo_moniker_use_extender ()</title>
<indexterm zone="bonobo-moniker-use-extender"><primary sortas="bonobo_moniker_use_extender">bonobo_moniker_use_extender</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_moniker_use_extender         (const <link linkend="gchar">gchar</link> *extender_oafiid,
                                                         <link linkend="BonoboMoniker">BonoboMoniker</link> *moniker,
                                                         const <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Locates a known extender via. OAFIID; eg.
OAFIID:Bonobo_Moniker_Extender_file</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>extender_oafiid</parameter>&#160;:</term>
<listitem><simpara> The IID of the extender to use
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> the moniker to extend
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>options</parameter>&#160;:</term>
<listitem><simpara> resolve options
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requested_interface</parameter>&#160;:</term>
<listitem><simpara> the requested interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional corba environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the resolved result or CORBA_OBJECT_NIL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
