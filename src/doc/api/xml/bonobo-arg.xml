<refentry id="libbonobo-bonobo-arg">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-arg.top_of_page">bonobo-arg</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-arg</refname>
<refpurpose>simplified CORBA_Any wrappers</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-arg.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
typedef             <link linkend="BonoboArg">BonoboArg</link>;
typedef             <link linkend="BonoboArgType">BonoboArgType</link>;
#define             <link linkend="BONOBO-ARG-NULL--CAPS">BONOBO_ARG_NULL</link>
#define             <link linkend="BONOBO-ARG-BOOLEAN--CAPS">BONOBO_ARG_BOOLEAN</link>
#define             <link linkend="BONOBO-ARG-SHORT--CAPS">BONOBO_ARG_SHORT</link>
#define             <link linkend="BONOBO-ARG-INT--CAPS">BONOBO_ARG_INT</link>
#define             <link linkend="BONOBO-ARG-LONG--CAPS">BONOBO_ARG_LONG</link>
#define             <link linkend="BONOBO-ARG-LONGLONG--CAPS">BONOBO_ARG_LONGLONG</link>
#define             <link linkend="BONOBO-ARG-FLOAT--CAPS">BONOBO_ARG_FLOAT</link>
#define             <link linkend="BONOBO-ARG-DOUBLE--CAPS">BONOBO_ARG_DOUBLE</link>
#define             <link linkend="BONOBO-ARG-CHAR--CAPS">BONOBO_ARG_CHAR</link>
#define             <link linkend="BONOBO-ARG-STRING--CAPS">BONOBO_ARG_STRING</link>
#define             <link linkend="BONOBO-ARG-GET-GENERAL--CAPS">BONOBO_ARG_GET_GENERAL</link>              (a,c,t,e)
#define             <link linkend="BONOBO-ARG-SET-GENERAL--CAPS">BONOBO_ARG_SET_GENERAL</link>              (a,v,c,t,e)
#define             <link linkend="BONOBO-ARG-GET-BOOLEAN--CAPS">BONOBO_ARG_GET_BOOLEAN</link>              (a)
#define             <link linkend="BONOBO-ARG-SET-BOOLEAN--CAPS">BONOBO_ARG_SET_BOOLEAN</link>              (a,v)
#define             <link linkend="BONOBO-ARG-GET-SHORT--CAPS">BONOBO_ARG_GET_SHORT</link>                (a)
#define             <link linkend="BONOBO-ARG-SET-SHORT--CAPS">BONOBO_ARG_SET_SHORT</link>                (a,v)
#define             <link linkend="BONOBO-ARG-GET-INT--CAPS">BONOBO_ARG_GET_INT</link>                  (a)
#define             <link linkend="BONOBO-ARG-SET-INT--CAPS">BONOBO_ARG_SET_INT</link>                  (a,v)
#define             <link linkend="BONOBO-ARG-GET-LONG--CAPS">BONOBO_ARG_GET_LONG</link>                 (a)
#define             <link linkend="BONOBO-ARG-SET-LONG--CAPS">BONOBO_ARG_SET_LONG</link>                 (a,v)
#define             <link linkend="BONOBO-ARG-GET-LONGLONG--CAPS">BONOBO_ARG_GET_LONGLONG</link>             (a)
#define             <link linkend="BONOBO-ARG-SET-LONGLONG--CAPS">BONOBO_ARG_SET_LONGLONG</link>             (a,v)
#define             <link linkend="BONOBO-ARG-GET-FLOAT--CAPS">BONOBO_ARG_GET_FLOAT</link>                (a)
#define             <link linkend="BONOBO-ARG-SET-FLOAT--CAPS">BONOBO_ARG_SET_FLOAT</link>                (a,v)
#define             <link linkend="BONOBO-ARG-GET-DOUBLE--CAPS">BONOBO_ARG_GET_DOUBLE</link>               (a)
#define             <link linkend="BONOBO-ARG-SET-DOUBLE--CAPS">BONOBO_ARG_SET_DOUBLE</link>               (a,v)
#define             <link linkend="BONOBO-ARG-GET-CHAR--CAPS">BONOBO_ARG_GET_CHAR</link>                 (a)
#define             <link linkend="BONOBO-ARG-SET-CHAR--CAPS">BONOBO_ARG_SET_CHAR</link>                 (a,v)
#define             <link linkend="BONOBO-ARG-GET-STRING--CAPS">BONOBO_ARG_GET_STRING</link>               (a)
#define             <link linkend="BONOBO-ARG-SET-STRING--CAPS">BONOBO_ARG_SET_STRING</link>               (a,v)
<link linkend="BonoboArg">BonoboArg</link> *         <link linkend="bonobo-arg-new">bonobo_arg_new</link>                      (<link linkend="BonoboArgType">BonoboArgType</link> t);
<link linkend="BonoboArg">BonoboArg</link> *         <link linkend="bonobo-arg-new-from">bonobo_arg_new_from</link>                 (<link linkend="BonoboArgType">BonoboArgType</link> t,
                                                         <link linkend="gconstpointer">gconstpointer</link> data);
<link linkend="void">void</link>                <link linkend="bonobo-arg-release">bonobo_arg_release</link>                  (<link linkend="BonoboArg">BonoboArg</link> *arg);
<link linkend="BonoboArg">BonoboArg</link> *         <link linkend="bonobo-arg-copy">bonobo_arg_copy</link>                     (const <link linkend="BonoboArg">BonoboArg</link> *arg);
<link linkend="void">void</link>                <link linkend="bonobo-arg-from-gvalue">bonobo_arg_from_gvalue</link>              (<link linkend="BonoboArg">BonoboArg</link> *a,
                                                         const <link linkend="GValue">GValue</link> *value);
<link linkend="BonoboArgType">BonoboArgType</link>       <link linkend="bonobo-arg-type-from-gtype">bonobo_arg_type_from_gtype</link>          (<link linkend="GType">GType</link> t);
<link linkend="void">void</link>                <link linkend="bonobo-arg-to-gvalue">bonobo_arg_to_gvalue</link>                (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="BonoboArg">BonoboArg</link> *arg);
<link linkend="GType">GType</link>               <link linkend="bonobo-arg-type-to-gtype">bonobo_arg_type_to_gtype</link>            (<link linkend="BonoboArgType">BonoboArgType</link> id);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-arg-is-equal">bonobo_arg_is_equal</link>                 (const <link linkend="BonoboArg">BonoboArg</link> *a,
                                                         const <link linkend="BonoboArg">BonoboArg</link> *b,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-arg-type-is-equal">bonobo_arg_type_is_equal</link>            (<link linkend="BonoboArgType">BonoboArgType</link> a,
                                                         <link linkend="BonoboArgType">BonoboArgType</link> b,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-arg.description" role="desc">
<title role="desc.title">Description</title>
<para>
The BonoboArg code, and macros are designed to make the
use of CORBA_Any's slightly simpler by providing a glib
like binding for them. The bonobo-arg code also provides
mappings between GValues and CORBA_anys.
</para>
<para>
A typical use of the BonoboArg macros would be in
  <example>
     <title>Property bag implementation</title>
     <programlisting>
static void
get_prop (BonoboPropertyBag *bag,
	  BonoboArg         *arg,
	  guint              arg_id,
	  CORBA_Environment *ev,
	  gpointer           user_data)
{
	GObject *clock = user_data;
	switch (arg_id) {
	case PROP_RUNNING: {
		BONOBO_ARG_SET_BOOLEAN (arg, is_it_running);
		break;
	}
	default:
		bonobo_exception_set (ev, ex_Bonobo_PropertyBag_NotFound);
		break;
	}
}
     </programlisting>
  </example>
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-arg.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboArg" role="typedef">
<title>BonoboArg</title>
<indexterm zone="BonoboArg"><primary sortas="BonoboArg">BonoboArg</primary></indexterm><programlisting>typedef CORBA_any      BonoboArg;
</programlisting>
<para>
A glib style looking type alias for a CORBA_any
</para></refsect2>
<refsect2 id="BonoboArgType" role="typedef">
<title>BonoboArgType</title>
<indexterm zone="BonoboArgType"><primary sortas="BonoboArgType">BonoboArgType</primary></indexterm><programlisting>typedef CORBA_TypeCode BonoboArgType;
</programlisting>
<para>
A glib style looking typedef for a CORBA type description.
</para></refsect2>
<refsect2 id="BONOBO-ARG-NULL--CAPS" role="macro">
<title>BONOBO_ARG_NULL</title>
<indexterm zone="BONOBO-ARG-NULL--CAPS"><primary sortas="BONOBO_ARG_NULL">BONOBO_ARG_NULL</primary></indexterm><programlisting>#define BONOBO_ARG_NULL     TC_null
</programlisting>
<para>
the null type
</para></refsect2>
<refsect2 id="BONOBO-ARG-BOOLEAN--CAPS" role="macro">
<title>BONOBO_ARG_BOOLEAN</title>
<indexterm zone="BONOBO-ARG-BOOLEAN--CAPS"><primary sortas="BONOBO_ARG_BOOLEAN">BONOBO_ARG_BOOLEAN</primary></indexterm><programlisting>#define BONOBO_ARG_BOOLEAN  TC_CORBA_boolean
</programlisting>
<para>
the boolean type
</para></refsect2>
<refsect2 id="BONOBO-ARG-SHORT--CAPS" role="macro">
<title>BONOBO_ARG_SHORT</title>
<indexterm zone="BONOBO-ARG-SHORT--CAPS"><primary sortas="BONOBO_ARG_SHORT">BONOBO_ARG_SHORT</primary></indexterm><programlisting>#define BONOBO_ARG_SHORT    TC_CORBA_short
</programlisting>
<para>
the short type
</para></refsect2>
<refsect2 id="BONOBO-ARG-INT--CAPS" role="macro">
<title>BONOBO_ARG_INT</title>
<indexterm zone="BONOBO-ARG-INT--CAPS"><primary sortas="BONOBO_ARG_INT">BONOBO_ARG_INT</primary></indexterm><programlisting>#define BONOBO_ARG_INT      TC_CORBA_long
</programlisting>
<para>
the integer type [ in fact a long ]
</para></refsect2>
<refsect2 id="BONOBO-ARG-LONG--CAPS" role="macro">
<title>BONOBO_ARG_LONG</title>
<indexterm zone="BONOBO-ARG-LONG--CAPS"><primary sortas="BONOBO_ARG_LONG">BONOBO_ARG_LONG</primary></indexterm><programlisting>#define BONOBO_ARG_LONG     TC_CORBA_long
</programlisting>
<para>
the long type
</para></refsect2>
<refsect2 id="BONOBO-ARG-LONGLONG--CAPS" role="macro">
<title>BONOBO_ARG_LONGLONG</title>
<indexterm zone="BONOBO-ARG-LONGLONG--CAPS"><primary sortas="BONOBO_ARG_LONGLONG">BONOBO_ARG_LONGLONG</primary></indexterm><programlisting>#define BONOBO_ARG_LONGLONG TC_CORBA_long_long
</programlisting>
<para>
the long long type
</para></refsect2>
<refsect2 id="BONOBO-ARG-FLOAT--CAPS" role="macro">
<title>BONOBO_ARG_FLOAT</title>
<indexterm zone="BONOBO-ARG-FLOAT--CAPS"><primary sortas="BONOBO_ARG_FLOAT">BONOBO_ARG_FLOAT</primary></indexterm><programlisting>#define BONOBO_ARG_FLOAT    TC_CORBA_float
</programlisting>
<para>
the float type
</para></refsect2>
<refsect2 id="BONOBO-ARG-DOUBLE--CAPS" role="macro">
<title>BONOBO_ARG_DOUBLE</title>
<indexterm zone="BONOBO-ARG-DOUBLE--CAPS"><primary sortas="BONOBO_ARG_DOUBLE">BONOBO_ARG_DOUBLE</primary></indexterm><programlisting>#define BONOBO_ARG_DOUBLE   TC_CORBA_double
</programlisting>
<para>
the double type
</para></refsect2>
<refsect2 id="BONOBO-ARG-CHAR--CAPS" role="macro">
<title>BONOBO_ARG_CHAR</title>
<indexterm zone="BONOBO-ARG-CHAR--CAPS"><primary sortas="BONOBO_ARG_CHAR">BONOBO_ARG_CHAR</primary></indexterm><programlisting>#define BONOBO_ARG_CHAR     TC_CORBA_char
</programlisting>
<para>
the char type
</para></refsect2>
<refsect2 id="BONOBO-ARG-STRING--CAPS" role="macro">
<title>BONOBO_ARG_STRING</title>
<indexterm zone="BONOBO-ARG-STRING--CAPS"><primary sortas="BONOBO_ARG_STRING">BONOBO_ARG_STRING</primary></indexterm><programlisting>#define BONOBO_ARG_STRING   TC_CORBA_string
</programlisting>
<para>
the string type
</para></refsect2>
<refsect2 id="BONOBO-ARG-GET-GENERAL--CAPS" role="macro">
<title>BONOBO_ARG_GET_GENERAL()</title>
<indexterm zone="BONOBO-ARG-GET-GENERAL--CAPS"><primary sortas="BONOBO_ARG_GET_GENERAL">BONOBO_ARG_GET_GENERAL</primary></indexterm><programlisting>#define             BONOBO_ARG_GET_GENERAL(a,c,t,e)</programlisting>
<para>
A macro to extract a value from a BonoboArg with
the given CORBA type <parameter>t</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c</parameter>&#160;:</term>
<listitem><simpara>a BonoboArgType for checking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>the C type of the value eg. for BONOBO_ARG_LONG: CORBA_long
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara>an optional CORBA_Environment or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-GENERAL--CAPS" role="macro">
<title>BONOBO_ARG_SET_GENERAL()</title>
<indexterm zone="BONOBO-ARG-SET-GENERAL--CAPS"><primary sortas="BONOBO_ARG_SET_GENERAL">BONOBO_ARG_SET_GENERAL</primary></indexterm><programlisting>#define             BONOBO_ARG_SET_GENERAL(a,v,c,t,e)</programlisting>
<para>
A macro to insert a value into an empty BonoboArg with
the given CORBA type <parameter>t</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a pointer to the value to insert.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>c</parameter>&#160;:</term>
<listitem><simpara>a BonoboArgType for checking
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>the C type of the value eg. for BONOBO_ARG_LONG: CORBA_long
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>e</parameter>&#160;:</term>
<listitem><simpara>an optional CORBA_Environment or NULL.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-BOOLEAN--CAPS" role="macro">
<title>BONOBO_ARG_GET_BOOLEAN()</title>
<indexterm zone="BONOBO-ARG-GET-BOOLEAN--CAPS"><primary sortas="BONOBO_ARG_GET_BOOLEAN">BONOBO_ARG_GET_BOOLEAN</primary></indexterm><programlisting>#define BONOBO_ARG_GET_BOOLEAN(a)   (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_boolean, CORBA_boolean, NULL))
</programlisting>
<para>
This macro returns a CORBA_boolean from inside a BonoboArg.
If the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-BOOLEAN--CAPS" role="macro">
<title>BONOBO_ARG_SET_BOOLEAN()</title>
<indexterm zone="BONOBO-ARG-SET-BOOLEAN--CAPS"><primary sortas="BONOBO_ARG_SET_BOOLEAN">BONOBO_ARG_SET_BOOLEAN</primary></indexterm><programlisting>#define BONOBO_ARG_SET_BOOLEAN(a,v) (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_boolean, CORBA_boolean, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_boolean.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-SHORT--CAPS" role="macro">
<title>BONOBO_ARG_GET_SHORT()</title>
<indexterm zone="BONOBO-ARG-GET-SHORT--CAPS"><primary sortas="BONOBO_ARG_GET_SHORT">BONOBO_ARG_GET_SHORT</primary></indexterm><programlisting>#define BONOBO_ARG_GET_SHORT(a)     (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_short, CORBA_short, NULL))
</programlisting>
<para>
This macro returns a CORBA_short from inside a BonoboArg.
If the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-SHORT--CAPS" role="macro">
<title>BONOBO_ARG_SET_SHORT()</title>
<indexterm zone="BONOBO-ARG-SET-SHORT--CAPS"><primary sortas="BONOBO_ARG_SET_SHORT">BONOBO_ARG_SET_SHORT</primary></indexterm><programlisting>#define BONOBO_ARG_SET_SHORT(a,v)   (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_short, CORBA_short, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_short.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-INT--CAPS" role="macro">
<title>BONOBO_ARG_GET_INT()</title>
<indexterm zone="BONOBO-ARG-GET-INT--CAPS"><primary sortas="BONOBO_ARG_GET_INT">BONOBO_ARG_GET_INT</primary></indexterm><programlisting>#define BONOBO_ARG_GET_INT(a)       (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long, CORBA_long, NULL))
</programlisting>
<para>
this macro returns a CORBA_long from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-INT--CAPS" role="macro">
<title>BONOBO_ARG_SET_INT()</title>
<indexterm zone="BONOBO-ARG-SET-INT--CAPS"><primary sortas="BONOBO_ARG_SET_INT">BONOBO_ARG_SET_INT</primary></indexterm><programlisting>#define BONOBO_ARG_SET_INT(a,v)     (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long, CORBA_long, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_long.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-LONG--CAPS" role="macro">
<title>BONOBO_ARG_GET_LONG()</title>
<indexterm zone="BONOBO-ARG-GET-LONG--CAPS"><primary sortas="BONOBO_ARG_GET_LONG">BONOBO_ARG_GET_LONG</primary></indexterm><programlisting>#define BONOBO_ARG_GET_LONG(a)      (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long, CORBA_long, NULL))
</programlisting>
<para>
this macro returns a CORBA_long from from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-LONG--CAPS" role="macro">
<title>BONOBO_ARG_SET_LONG()</title>
<indexterm zone="BONOBO-ARG-SET-LONG--CAPS"><primary sortas="BONOBO_ARG_SET_LONG">BONOBO_ARG_SET_LONG</primary></indexterm><programlisting>#define BONOBO_ARG_SET_LONG(a,v)    (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long, CORBA_long, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_long.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-LONGLONG--CAPS" role="macro">
<title>BONOBO_ARG_GET_LONGLONG()</title>
<indexterm zone="BONOBO-ARG-GET-LONGLONG--CAPS"><primary sortas="BONOBO_ARG_GET_LONGLONG">BONOBO_ARG_GET_LONGLONG</primary></indexterm><programlisting>#define BONOBO_ARG_GET_LONGLONG(a)  (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_long_long, CORBA_long_long, NULL))
</programlisting>
<para>
this macro returns a CORBA_long_long from from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-LONGLONG--CAPS" role="macro">
<title>BONOBO_ARG_SET_LONGLONG()</title>
<indexterm zone="BONOBO-ARG-SET-LONGLONG--CAPS"><primary sortas="BONOBO_ARG_SET_LONGLONG">BONOBO_ARG_SET_LONGLONG</primary></indexterm><programlisting>#define BONOBO_ARG_SET_LONGLONG(a,v) (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_long_long, CORBA_long_long, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_long_long.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-FLOAT--CAPS" role="macro">
<title>BONOBO_ARG_GET_FLOAT()</title>
<indexterm zone="BONOBO-ARG-GET-FLOAT--CAPS"><primary sortas="BONOBO_ARG_GET_FLOAT">BONOBO_ARG_GET_FLOAT</primary></indexterm><programlisting>#define BONOBO_ARG_GET_FLOAT(a)     (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_float, CORBA_float, NULL))
</programlisting>
<para>
this macro returns a CORBA_float from inside a BonoboArg,
if the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-FLOAT--CAPS" role="macro">
<title>BONOBO_ARG_SET_FLOAT()</title>
<indexterm zone="BONOBO-ARG-SET-FLOAT--CAPS"><primary sortas="BONOBO_ARG_SET_FLOAT">BONOBO_ARG_SET_FLOAT</primary></indexterm><programlisting>#define BONOBO_ARG_SET_FLOAT(a,v)   (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_float, CORBA_float, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_float.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-DOUBLE--CAPS" role="macro">
<title>BONOBO_ARG_GET_DOUBLE()</title>
<indexterm zone="BONOBO-ARG-GET-DOUBLE--CAPS"><primary sortas="BONOBO_ARG_GET_DOUBLE">BONOBO_ARG_GET_DOUBLE</primary></indexterm><programlisting>#define BONOBO_ARG_GET_DOUBLE(a)    (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_double, CORBA_double, NULL))
</programlisting>
<para>
This macro returns a CORBA_double from inside a BonoboArg.
If the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-DOUBLE--CAPS" role="macro">
<title>BONOBO_ARG_SET_DOUBLE()</title>
<indexterm zone="BONOBO-ARG-SET-DOUBLE--CAPS"><primary sortas="BONOBO_ARG_SET_DOUBLE">BONOBO_ARG_SET_DOUBLE</primary></indexterm><programlisting>#define BONOBO_ARG_SET_DOUBLE(a,v)  (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_double, CORBA_double, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_double.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-CHAR--CAPS" role="macro">
<title>BONOBO_ARG_GET_CHAR()</title>
<indexterm zone="BONOBO-ARG-GET-CHAR--CAPS"><primary sortas="BONOBO_ARG_GET_CHAR">BONOBO_ARG_GET_CHAR</primary></indexterm><programlisting>#define BONOBO_ARG_GET_CHAR(a)      (BONOBO_ARG_GET_GENERAL (a, TC_CORBA_char, CORBA_char, NULL))
</programlisting>
<para>
This macro returns a CORBA_char from inside a BonoboArg,
If the BonoboArg's type does not match, the behavior is
undefined, and may cause faults.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-CHAR--CAPS" role="macro">
<title>BONOBO_ARG_SET_CHAR()</title>
<indexterm zone="BONOBO-ARG-SET-CHAR--CAPS"><primary sortas="BONOBO_ARG_SET_CHAR">BONOBO_ARG_SET_CHAR</primary></indexterm><programlisting>#define BONOBO_ARG_SET_CHAR(a,v)    (BONOBO_ARG_SET_GENERAL (a, v, TC_CORBA_char, CORBA_char, NULL))
</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_char.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-GET-STRING--CAPS" role="macro">
<title>BONOBO_ARG_GET_STRING()</title>
<indexterm zone="BONOBO-ARG-GET-STRING--CAPS"><primary sortas="BONOBO_ARG_GET_STRING">BONOBO_ARG_GET_STRING</primary></indexterm><programlisting>#define             BONOBO_ARG_GET_STRING(a)</programlisting>
<para>
this macro returns a const CORBA_char * from from inside a
BonoboArg, if the BonoboArg's type does not match, the
behavior is undefined, and may cause faults. The
pointer to the string is only valid for the scope of
the lifetime of <parameter>a</parameter>.
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the BonoboArg to extract the value from.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-ARG-SET-STRING--CAPS" role="macro">
<title>BONOBO_ARG_SET_STRING()</title>
<indexterm zone="BONOBO-ARG-SET-STRING--CAPS"><primary sortas="BONOBO_ARG_SET_STRING">BONOBO_ARG_SET_STRING</primary></indexterm><programlisting>#define             BONOBO_ARG_SET_STRING(a,v)</programlisting>
<para>
This macro sets the value of <parameter>a</parameter> to contain a
duplicated copy of <parameter>v</parameter>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara>the Bonobo arg to insert the value into
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>v</parameter>&#160;:</term>
<listitem><simpara>a CORBA_char *.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-new" role="function">
<title>bonobo_arg_new ()</title>
<indexterm zone="bonobo-arg-new"><primary sortas="bonobo_arg_new">bonobo_arg_new</primary></indexterm><programlisting><link linkend="BonoboArg">BonoboArg</link> *         bonobo_arg_new                      (<link linkend="BonoboArgType">BonoboArgType</link> t);</programlisting>
<para>
Create a new BonoboArg with the specified type
the value of the BonoboArg is initially empty.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara> the BonoboArgType eg. TC_CORBA_long
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="BonoboArg"><type>BonoboArg</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-new-from" role="function">
<title>bonobo_arg_new_from ()</title>
<indexterm zone="bonobo-arg-new-from"><primary sortas="bonobo_arg_new_from">bonobo_arg_new_from</primary></indexterm><programlisting><link linkend="BonoboArg">BonoboArg</link> *         bonobo_arg_new_from                 (<link linkend="BonoboArgType">BonoboArgType</link> t,
                                                         <link linkend="gconstpointer">gconstpointer</link> data);</programlisting>
<para>
Create a new BonoboArg with the specified type and data</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara> the BonoboArgType eg. TC_CORBA_long
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>data</parameter>&#160;:</term>
<listitem><simpara> the data for the BonoboArg to be created
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the new <link linkend="BonoboArg"><type>BonoboArg</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-release" role="function">
<title>bonobo_arg_release ()</title>
<indexterm zone="bonobo-arg-release"><primary sortas="bonobo_arg_release">bonobo_arg_release</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_arg_release                  (<link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
<para>
This frees the memory associated with <parameter>arg</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg</parameter>&#160;:</term>
<listitem><simpara> the bonobo arg.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-copy" role="function">
<title>bonobo_arg_copy ()</title>
<indexterm zone="bonobo-arg-copy"><primary sortas="bonobo_arg_copy">bonobo_arg_copy</primary></indexterm><programlisting><link linkend="BonoboArg">BonoboArg</link> *         bonobo_arg_copy                     (const <link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
<para>
This function duplicates <parameter>a</parameter> by a deep copy</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>arg</parameter>&#160;:</term>
<listitem><simpara> the bonobo arg
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a copy of <parameter>arg</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-from-gvalue" role="function">
<title>bonobo_arg_from_gvalue ()</title>
<indexterm zone="bonobo-arg-from-gvalue"><primary sortas="bonobo_arg_from_gvalue">bonobo_arg_from_gvalue</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_arg_from_gvalue              (<link linkend="BonoboArg">BonoboArg</link> *a,
                                                         const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
This maps a GValue <parameter>value</parameter> to a BonoboArg <parameter>a</parameter>;
<parameter>a</parameter> must point to a freshly allocated BonoboArg
eg. such as returned by bonobo_arg_new</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara> pointer to blank BonoboArg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> <link linkend="GValue"><type>GValue</type></link> to copy
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-type-from-gtype" role="function">
<title>bonobo_arg_type_from_gtype ()</title>
<indexterm zone="bonobo-arg-type-from-gtype"><primary sortas="bonobo_arg_type_from_gtype">bonobo_arg_type_from_gtype</primary></indexterm><programlisting><link linkend="BonoboArgType">BonoboArgType</link>       bonobo_arg_type_from_gtype          (<link linkend="GType">GType</link> t);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>t</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-to-gvalue" role="function">
<title>bonobo_arg_to_gvalue ()</title>
<indexterm zone="bonobo-arg-to-gvalue"><primary sortas="bonobo_arg_to_gvalue">bonobo_arg_to_gvalue</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_arg_to_gvalue                (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="BonoboArg">BonoboArg</link> *arg);</programlisting>
<para>
Maps a BonoboArg to a GtkArg; <parameter>a</parameter> must point
to a blank GtkArg.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara> pointer to a blank <link linkend="GValue"><type>GValue</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg</parameter>&#160;:</term>
<listitem><simpara> the BonoboArg to copy
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-type-to-gtype" role="function">
<title>bonobo_arg_type_to_gtype ()</title>
<indexterm zone="bonobo-arg-type-to-gtype"><primary sortas="bonobo_arg_type_to_gtype">bonobo_arg_type_to_gtype</primary></indexterm><programlisting><link linkend="GType">GType</link>               bonobo_arg_type_to_gtype            (<link linkend="BonoboArgType">BonoboArgType</link> id);</programlisting>
<para>
This maps a BonoboArgType to a GType</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> the BonoboArgType
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the mapped type or <link linkend="0--CAPS"><literal>0</literal></link> on failure
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-is-equal" role="function">
<title>bonobo_arg_is_equal ()</title>
<indexterm zone="bonobo-arg-is-equal"><primary sortas="bonobo_arg_is_equal">bonobo_arg_is_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_arg_is_equal                 (const <link linkend="BonoboArg">BonoboArg</link> *a,
                                                         const <link linkend="BonoboArg">BonoboArg</link> *b,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Compares two <link linkend="BonoboArg"><type>BonoboArg</type></link>'s for equivalence; will return <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>
if equivalent for all simple cases. For Object references
CORBA sometimes denies 2 object references are equivalent
even if they are [ this is a feature_not_bug ].
</para>
<para>
This function is commutative.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara> a bonobo arg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&#160;:</term>
<listitem><simpara> another bonobo arg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional exception environment or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>a</parameter> == <parameter>b</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-arg-type-is-equal" role="function">
<title>bonobo_arg_type_is_equal ()</title>
<indexterm zone="bonobo-arg-type-is-equal"><primary sortas="bonobo_arg_type_is_equal">bonobo_arg_type_is_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_arg_type_is_equal            (<link linkend="BonoboArgType">BonoboArgType</link> a,
                                                         <link linkend="BonoboArgType">BonoboArgType</link> b,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This compares two <link linkend="BonoboArgType"><type>BonoboArgType</type></link>'s in <parameter>a</parameter> and <parameter>b</parameter>.
The <parameter>opt_ev</parameter> is an optional <link linkend="CORBA-Environment"><type>CORBA_Environment</type></link> for
exceptions, or <link linkend="NULL--CAPS"><literal>NULL</literal></link>. This function is commutative.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>a</parameter>&#160;:</term>
<listitem><simpara> a type code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>b</parameter>&#160;:</term>
<listitem><simpara> a type code
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional exception environment or NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if equal, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> if different
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
