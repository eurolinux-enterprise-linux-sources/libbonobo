<refentry id="libbonobo-bonobo-listener">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-listener.top_of_page">bonobo-listener</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-listener</refname>
<refpurpose>An Event Listener (an implementation of Bonobo::Listener)</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-listener.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>
<anchor id="BonoboListener"/>
<synopsis>
                    <link linkend="BonoboListener-struct">BonoboListener</link>;
                    <link linkend="BonoboListenerClass">BonoboListenerClass</link>;
<link linkend="void">void</link>                (<link linkend="BonoboListenerCallbackFn">*BonoboListenerCallbackFn</link>)         (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                                         const <link linkend="char">char</link> *event_name,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *any,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="BonoboListener">BonoboListener</link> *    <link linkend="bonobo-listener-new">bonobo_listener_new</link>                 (<link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="BonoboListener">BonoboListener</link> *    <link linkend="bonobo-listener-new-closure">bonobo_listener_new_closure</link>         (<link linkend="GClosure">GClosure</link> *event_closure);
<link linkend="char">char</link> *              <link linkend="bonobo-event-make-name">bonobo_event_make_name</link>              (const <link linkend="char">char</link> *idl_path,
                                                         const <link linkend="char">char</link> *kind,
                                                         const <link linkend="char">char</link> *subtype);
<link linkend="char">char</link> *              <link linkend="bonobo-event-type">bonobo_event_type</link>                   (const <link linkend="char">char</link> *event_name);
<link linkend="char">char</link> *              <link linkend="bonobo-event-subtype">bonobo_event_subtype</link>                (const <link linkend="char">char</link> *event_name);
<link linkend="char">char</link> *              <link linkend="bonobo-event-kind">bonobo_event_kind</link>                   (const <link linkend="char">char</link> *event_name);
<link linkend="char">char</link> *              <link linkend="bonobo-event-idl-path">bonobo_event_idl_path</link>               (const <link linkend="char">char</link> *event_name);
</synopsis>
</refsynopsisdiv>

<refsect1 id="libbonobo-bonobo-listener.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="BonoboObject">BonoboObject</link>
         +----BonoboListener
</synopsis>
</refsect1>






<refsect1 id="libbonobo-bonobo-listener.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="BonoboListener-event-notify">event-notify</link>&quot;                                   : Run Last
</synopsis>
</refsect1>


<refsect1 id="libbonobo-bonobo-listener.description" role="desc">
<title role="desc.title">Description</title>
<para>
   The BonoboListener object is a CORBA server used to receive events
   emitted by a remote Bonobo::EventSource server.  The combination
   EventSource/Listener is used to notify one or more client
   applications of events that happen in a component.    Think of the
   EventSource/Listener as a notification/callback system that allows
   multiple clients to be informed of events.
</para>
<para>
   Once created, the BonoboListener object needs to be attached to a
   remote IDL:Bonobo/EventSource:1.0 server.  This is done by passing the
   CORBA Object reference of the BonoboListener to the addListener
   method in the IDL:Bonobo/EventSource:1.0.
</para>
<para>
   The BonoboListener object allows the user to specify a callback
   function to be invoked when an event is emitted by the
   IDL:Bonobo/EventSource:1.0 server.  The BonoboListener object also
   emits the "event_notify" Gtk+ signal, which allows you to connect
   multiple code segments to the same event notification.
</para>
<para>
    Here is a sample client application that registers interest in
    being notified of events from the fictional "Keyboard" event
    source:
    <informalexample>
      <programlisting>
BonoboListener *keyboard_listener;
my_listener_function (BonoboListener *l, char *event_name,
                      CORBA_any value, CORBA_Environment *ev,
                      gpointer user_data)
{
	printf ("Received event named: %s\n", event_name);
}
connect_to_keyboard_source (Bonobo_EventSource *keyboard)
{
        Bonobo_Unknown reference;
        /*
         * First, create the listener Bonobo server.
         */
	keyboard_listener = bonobo_listener_new (my_listener_function, NULL);
        /*
         * Now, register our listener with the EventSource
         */
        reference = bonobo_object_corba_objref (keyboard_listener);
        Bonobo_EventSource_addListener (keyboard, reference);
}
      </programlisting>
    </informalexample>
</para>
<para>
  The CORBA::any value passed to the listener function is defined by
  the contract between the EventSource's event you are using and you.
  To manipulate the value, you can use the CORBA DynamicAny interface
  to introspect the value and extract the information you need.
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-listener.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="BonoboListener-struct" role="struct">
<title>BonoboListener</title>
<indexterm zone="BonoboListener-struct"><primary sortas="BonoboListener">BonoboListener</primary></indexterm><programlisting>typedef struct _BonoboListener BonoboListener;</programlisting>
<para>
Implementents Bonobo::Listener.
</para></refsect2>
<refsect2 id="BonoboListenerClass" role="struct">
<title>BonoboListenerClass</title>
<indexterm zone="BonoboListenerClass"><primary sortas="BonoboListenerClass">BonoboListenerClass</primary></indexterm><programlisting>typedef struct {
	BonoboObjectClass     parent_class;

	POA_Bonobo_Listener__epv epv;

	/* Signals */
	void (* event_notify) (BonoboListener    *listener, 
			       char              *event_name,
			       BonoboArg         *event_data, 
			       CORBA_Environment *ev);
} BonoboListenerClass;
</programlisting>
<para>
<link linkend="BonoboListener"><type>BonoboListener</type></link>'s class
</para></refsect2>
<refsect2 id="BonoboListenerCallbackFn" role="function">
<title>BonoboListenerCallbackFn ()</title>
<indexterm zone="BonoboListenerCallbackFn"><primary sortas="BonoboListenerCallbackFn">BonoboListenerCallbackFn</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboListenerCallbackFn)         (<link linkend="BonoboListener">BonoboListener</link> *listener,
                                                         const <link linkend="char">char</link> *event_name,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *any,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
   The signature for the callback function invoked when an event is
   delivered to the BonoboListener object.
</para><variablelist role="params">
<varlistentry><term><parameter>listener</parameter>&#160;:</term>
<listitem><simpara>a pointer to the BonoboListener.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara>the event name that was emitted.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>any</parameter>&#160;:</term>
<listitem><simpara>The value (A CORBA Any) that was passed by the EventSource.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>Environment for returning CORBA errors.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>the data pointer specified when you called bonobo_listener_new
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-listener-new" role="function">
<title>bonobo_listener_new ()</title>
<indexterm zone="bonobo-listener-new"><primary sortas="bonobo_listener_new">bonobo_listener_new</primary></indexterm><programlisting><link linkend="BonoboListener">BonoboListener</link> *    bonobo_listener_new                 (<link linkend="BonoboListenerCallbackFn">BonoboListenerCallbackFn</link> event_cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Creates a generic event listener.  The listener calls the <parameter>event_callback</parameter> 
function and emits an "event_notify" signal when notified of an event.  
The signal callback should be of the form:
</para>
<para>
<informalexample>
<programlisting>
     void some_callback (BonoboListener *listener,
                         char *event_name, 
		    CORBA_any *any,
		    CORBA_Environment *ev,
		    gpointer user_data);
</programlisting>
</informalexample>
</para>
<para>
You will typically pass the CORBA_Object reference in the return value
to an EventSource (by invoking EventSource::addListener).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_cb</parameter>&#160;:</term>
<listitem><simpara> function to be invoked when an event is emitted by the EventSource.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> data passed to the functioned pointed by <parameter>event_call</parameter>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A BonoboListener object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-listener-new-closure" role="function">
<title>bonobo_listener_new_closure ()</title>
<indexterm zone="bonobo-listener-new-closure"><primary sortas="bonobo_listener_new_closure">bonobo_listener_new_closure</primary></indexterm><programlisting><link linkend="BonoboListener">BonoboListener</link> *    bonobo_listener_new_closure         (<link linkend="GClosure">GClosure</link> *event_closure);</programlisting>
<para>
Creates a generic event listener.  The listener invokes the <parameter>event_closure</parameter> 
closure and emits an "event_notify" signal when notified of an event.  
The signal callback should be of the form:
</para>
<para>
<informalexample>
<programlisting>
     void some_callback (BonoboListener *listener,
                         char *event_name, 
		    CORBA_any *any,
		    CORBA_Environment *ev,
		    gpointer user_data);
</programlisting>
</informalexample>
</para>
<para>
You will typically pass the CORBA_Object reference in the return value
to an EventSource (by invoking EventSource::addListener).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_closure</parameter>&#160;:</term>
<listitem><simpara> closure to be invoked when an event is emitted by the EventSource.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A BonoboListener object.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-make-name" role="function">
<title>bonobo_event_make_name ()</title>
<indexterm zone="bonobo-event-make-name"><primary sortas="bonobo_event_make_name">bonobo_event_make_name</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_event_make_name              (const <link linkend="char">char</link> *idl_path,
                                                         const <link linkend="char">char</link> *kind,
                                                         const <link linkend="char">char</link> *subtype);</programlisting>
<para>
Creates an event name. Event names consist of three parts. The <parameter>idl_path</parameter> is
mainly to create a unique namespace, and should identify the interface 
which triggered the event, for example "Bonobo/Property". The <parameter>kind</parameter> denotes
what happened, for example "change". Finally you can use the optional 
<parameter>subtype</parameter> to make events more specific. All three parts of the name are 
joined together separated by colons. "Bonobo/Property:change" or 
"Bonobo/Property:change:autosave" are examples of valid event names.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>idl_path</parameter>&#160;:</term>
<listitem><simpara> the IDL part of the event name.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>kind</parameter>&#160;:</term>
<listitem><simpara> the kind of the event
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>subtype</parameter>&#160;:</term>
<listitem><simpara> an optional subtype
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A valid event_name, or NULL on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-type" role="function">
<title>bonobo_event_type ()</title>
<indexterm zone="bonobo-event-type"><primary sortas="bonobo_event_type">bonobo_event_type</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_event_type                   (const <link linkend="char">char</link> *event_name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara> the event name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The event subtype, or NULL on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-subtype" role="function">
<title>bonobo_event_subtype ()</title>
<indexterm zone="bonobo-event-subtype"><primary sortas="bonobo_event_subtype">bonobo_event_subtype</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_event_subtype                (const <link linkend="char">char</link> *event_name);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-kind" role="function">
<title>bonobo_event_kind ()</title>
<indexterm zone="bonobo-event-kind"><primary sortas="bonobo_event_kind">bonobo_event_kind</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_event_kind                   (const <link linkend="char">char</link> *event_name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara> the event name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The event kind, or NULL on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-event-idl-path" role="function">
<title>bonobo_event_idl_path ()</title>
<indexterm zone="bonobo-event-idl-path"><primary sortas="bonobo_event_idl_path">bonobo_event_idl_path</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_event_idl_path               (const <link linkend="char">char</link> *event_name);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>event_name</parameter>&#160;:</term>
<listitem><simpara> the event name
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The event idl path, or NULL on error.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="libbonobo-bonobo-listener.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="BonoboListener-event-notify" role="signal"><title>The <literal>&quot;event-notify&quot;</literal> signal</title>
<indexterm zone="BonoboListener-event-notify"><primary sortas="BonoboListener::event-notify">BonoboListener::event-notify</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="BonoboListener">BonoboListener</link>       *bonobolistener,
                                                        <link linkend="gchar">gchar</link>                *arg1,
                                                        <link linkend="BonoboCorbaAny">BonoboCorbaAny</link>       *arg2,
                                                        <link linkend="BonoboCorbaException">BonoboCorbaException</link> *arg3,
                                                        <link linkend="gpointer">gpointer</link>              user_data)           : Run Last</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>bonobolistener</parameter>&#160;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg3</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1 id="libbonobo-bonobo-listener.see-also">
<title>See Also</title>
<para>
   <link linkend="BonoboEventSource"><type>BonoboEventSource</type></link> <link linkend="BonoboArg"><type>BonoboArg</type></link>
</para>
</refsect1>

</refentry>
