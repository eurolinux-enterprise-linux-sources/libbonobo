<refentry id="libbonobo-bonobo-moniker-util">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-moniker-util.top_of_page">bonobo-moniker-util</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-moniker-util</refname>
<refpurpose>Object activation and construction through monikers.</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-moniker-util.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-get-object">bonobo_get_object</link>                   (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Moniker">Bonobo_Moniker</link>      <link linkend="bonobo-moniker-client-new-from-name">bonobo_moniker_client_new_from_name</link> (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="CORBA-char">CORBA_char</link> *        <link linkend="bonobo-moniker-client-get-name">bonobo_moniker_client_get_name</link>      (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-moniker-client-resolve-default">bonobo_moniker_client_resolve_default</link>
                                                        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="gboolean">gboolean</link>            <link linkend="bonobo-moniker-client-equal">bonobo_moniker_client_equal</link>         (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="void">void</link>                (<link linkend="BonoboMonikerAsyncFn">*BonoboMonikerAsyncFn</link>)             (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-get-object-async">bonobo_get_object_async</link>             (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-moniker-client-new-from-name-async">bonobo_moniker_client_new_from_name_async</link>
                                                        (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-moniker-resolve-async">bonobo_moniker_resolve_async</link>        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="bonobo-moniker-resolve-async-default">bonobo_moniker_resolve_async_default</link>
                                                        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="CORBA-char">CORBA_char</link> *        <link linkend="bonobo-moniker-util-get-parent-name">bonobo_moniker_util_get_parent_name</link> (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-moniker-util-qi-return">bonobo_moniker_util_qi_return</link>       (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
const <link linkend="char">char</link> *        <link linkend="bonobo-moniker-util-parse-name">bonobo_moniker_util_parse_name</link>      (const <link linkend="char">char</link> *name,
                                                         <link linkend="int">int</link> *plen);
<link linkend="int">int</link>                 <link linkend="bonobo-moniker-util-seek-std-separator">bonobo_moniker_util_seek_std_separator</link>
                                                        (const <link linkend="CORBA-char">CORBA_char</link> *str,
                                                         <link linkend="int">int</link> min_idx);
<link linkend="char">char</link> *              <link linkend="bonobo-moniker-util-escape">bonobo_moniker_util_escape</link>          (const <link linkend="char">char</link> *string,
                                                         <link linkend="int">int</link> offset);
<link linkend="char">char</link> *              <link linkend="bonobo-moniker-util-unescape">bonobo_moniker_util_unescape</link>        (const <link linkend="char">char</link> *string,
                                                         <link linkend="int">int</link> num_chars);
<link linkend="void">void</link>                <link linkend="bonobo-url-register">bonobo_url_register</link>                 (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="char">char</link> *mime_type,
                                                         <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-url-unregister">bonobo_url_unregister</link>               (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-url-lookup">bonobo_url_lookup</link>                   (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-moniker-util.description" role="desc">
<title role="desc.title">Description</title>
<para>
The moniker utility functions provide two sets of functions:
  <itemizedlist>
    <listitem>
      <para>
      Helper functions for constructing and resolving monikers,
      and a simple get_object method that constructs and resolves
      against an interface in a single pass. Also, asynchronous
      versions of these methods are provided using the <link linkend="BonoboAsync"><type>BonoboAsync</type></link>
      code.
      </para>
    </listitem>
    <listitem>
      <para>
      Helper functions for the implementation of new custom
      monikers are also provided here, along with a lot of the
      grunt code neccessary for moniker implementation, particularly
      constructing the chained list of sub-monikers that comprises
      a complex moniker.
      </para>
    </listitem>
  </itemizedlist>
</para>
<para>
The most useful function to get a feel for what monikers can do
is the <function>bonobo_get_object</function> method. This is
used to create a moniker and resolve it against a given interface
like this:
  <example>
     <title>GetObject example</title>
     <programlisting>
GtkWidget *
moniker_resolve_demo (void)
{
	Bonobo_Control control;
	CORBA_Environment ev;
	CORBA_exception_init (&amp;ev);
	control = bonobo_get_object ("file:/demo/a.jpeg",
                                     "Bonobo/Control", NULL);
	if (control == CORBA_OBJECT_NIL)
		g_error ("Failed to get object file:/demo/a.jpeg");
	return bonobo_widget_new_control (control);
}
     </programlisting>
  </example>
  This also makes a control out of the widget.
</para>
<para>
  It is worth noting that when resolving monikers a contracted
version of the interface name may be used, ommitting the 'IDL:'
prefix and / or the ':0' suffix.
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-moniker-util.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="bonobo-get-object" role="function">
<title>bonobo_get_object ()</title>
<indexterm zone="bonobo-get-object"><primary sortas="bonobo_get_object">bonobo_get_object</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_get_object                   (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This encapsulates both the parse stage and resolve process of using
a moniker, providing a simple VisualBasic like mechanism for using the
object name space.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of a moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> the name of the interface we want returned as the result 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the requested interface or CORBA_OBJECT_NIL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-client-new-from-name" role="function">
<title>bonobo_moniker_client_new_from_name ()</title>
<indexterm zone="bonobo-moniker-client-new-from-name"><primary sortas="bonobo_moniker_client_new_from_name">bonobo_moniker_client_new_from_name</primary></indexterm><programlisting><link linkend="Bonobo-Moniker">Bonobo_Moniker</link>      bonobo_moniker_client_new_from_name (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This routine tries to parse a Moniker in string form
</para>
<para>
eg. file:/tmp/a.tar.gz<link linkend="gzip--"><type>""</type></link>#tar:
</para>
<para>
into a CORBA_Object representation of this that can
later be resolved against an interface.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name of a moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a new Moniker handle
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-client-get-name" role="function">
<title>bonobo_moniker_client_get_name ()</title>
<indexterm zone="bonobo-moniker-client-get-name"><primary sortas="bonobo_moniker_client_get_name">bonobo_moniker_client_get_name</primary></indexterm><programlisting><link linkend="CORBA-char">CORBA_char</link> *        bonobo_moniker_client_get_name      (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> a moniker handle
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of the moniker.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-client-resolve-default" role="function">
<title>bonobo_moniker_client_resolve_default ()</title>
<indexterm zone="bonobo-moniker-client-resolve-default"><primary sortas="bonobo_moniker_client_resolve_default">bonobo_moniker_client_resolve_default</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_moniker_client_resolve_default
                                                        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This resolves the moniker object against the given interface,
with a default set of resolve options.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> a moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> the name of the interface we want returned as the result 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the interfaces resolved to or CORBA_OBJECT_NIL
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-client-equal" role="function">
<title>bonobo_moniker_client_equal ()</title>
<indexterm zone="bonobo-moniker-client-equal"><primary sortas="bonobo_moniker_client_equal">bonobo_moniker_client_equal</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            bonobo_moniker_client_equal         (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
Compare a full <parameter>moniker</parameter> with the given <parameter>name</parameter></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> The moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a moniker name eg. file:/demo/a.jpeg
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> optional CORBA_Environment or NULL.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> TRUE if they are the same
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BonoboMonikerAsyncFn" role="function">
<title>BonoboMonikerAsyncFn ()</title>
<indexterm zone="BonoboMonikerAsyncFn"><primary sortas="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</primary></indexterm><programlisting><link linkend="void">void</link>                (*BonoboMonikerAsyncFn)             (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Callback function, invoked when <link linkend="bonobo-get-object-async"><function>bonobo_get_object_async()</function></link> completes its work.
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>the newly-activated object, or <link linkend="CORBA-OBJECT-NIL--CAPS"><literal>CORBA_OBJECT_NIL</literal></link> if an exception occurred
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>CORBA environment that may contain an exception if an activation error occurred
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-get-object-async" role="function">
<title>bonobo_get_object_async ()</title>
<indexterm zone="bonobo-get-object-async"><primary sortas="bonobo_get_object_async">bonobo_get_object_async</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_get_object_async             (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_get_object</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> the name of the interface we want returned as the result 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> the async callback that gets the response 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user context data to pass to that callback 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-client-new-from-name-async" role="function">
<title>bonobo_moniker_client_new_from_name_async ()</title>
<indexterm zone="bonobo-moniker-client-new-from-name-async"><primary sortas="bonobo_moniker_client_new_from_name_async">bonobo_moniker_client_new_from_name_async</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_moniker_client_new_from_name_async
                                                        (const <link linkend="CORBA-char">CORBA_char</link> *name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An asynchronous version of new_from_name</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> the name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> the async callback that gets the response
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user context data to pass to that callback
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-resolve-async" role="function">
<title>bonobo_moniker_resolve_async ()</title>
<indexterm zone="bonobo-moniker-resolve-async"><primary sortas="bonobo_moniker_resolve_async">bonobo_moniker_resolve_async</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_moniker_resolve_async        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="Bonobo-ResolveOptions">Bonobo_ResolveOptions</link> *options,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_moniker_client_resolve</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> the moniker to resolve
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>options</parameter>&#160;:</term>
<listitem><simpara> resolve options
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> the name of the interface we want returned as the result 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> the async callback that gets the response 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user context data to pass to that callback 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-resolve-async-default" role="function">
<title>bonobo_moniker_resolve_async_default ()</title>
<indexterm zone="bonobo-moniker-resolve-async-default"><primary sortas="bonobo_moniker_resolve_async_default">bonobo_moniker_resolve_async_default</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_moniker_resolve_async_default
                                                        (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         const <link linkend="char">char</link> *interface_name,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         <link linkend="BonoboMonikerAsyncFn">BonoboMonikerAsyncFn</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
An async version of bonobo_moniker_client_resolve_default</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>interface_name</parameter>&#160;:</term>
<listitem><simpara> the name of the interface we want returned as the result 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> the async callback that gets the response 
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> user context data to pass to that callback 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-get-parent-name" role="function">
<title>bonobo_moniker_util_get_parent_name ()</title>
<indexterm zone="bonobo-moniker-util-get-parent-name"><primary sortas="bonobo_moniker_util_get_parent_name">bonobo_moniker_util_get_parent_name</primary></indexterm><programlisting><link linkend="CORBA-char">CORBA_char</link> *        bonobo_moniker_util_get_parent_name (<link linkend="Bonobo-Moniker">Bonobo_Moniker</link> moniker,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *opt_ev);</programlisting>
<para>
This gets the name of the parent moniker ( recursively
all of the parents of this moniker ).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>moniker</parameter>&#160;:</term>
<listitem><simpara> the moniker
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>opt_ev</parameter>&#160;:</term>
<listitem><simpara> an optional corba exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name; use CORBA_free to release it.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-qi-return" role="function">
<title>bonobo_moniker_util_qi_return ()</title>
<indexterm zone="bonobo-moniker-util-qi-return"><primary sortas="bonobo_moniker_util_qi_return">bonobo_moniker_util_qi_return</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_moniker_util_qi_return       (<link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         const <link linkend="CORBA-char">CORBA_char</link> *requested_interface,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
A helper function to share code from the end of a resolve
implementation; this ensures that the returned object is of
the correct interface by doing a queryInterface on the object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara> the unknown to query
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>requested_interface</parameter>&#160;:</term>
<listitem><simpara> the desired interface
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a corba exception environment 
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an handle to the requested interface
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-parse-name" role="function">
<title>bonobo_moniker_util_parse_name ()</title>
<indexterm zone="bonobo-moniker-util-parse-name"><primary sortas="bonobo_moniker_util_parse_name">bonobo_moniker_util_parse_name</primary></indexterm><programlisting>const <link linkend="char">char</link> *        bonobo_moniker_util_parse_name      (const <link linkend="char">char</link> *name,
                                                         <link linkend="int">int</link> *plen);</programlisting>
<para>
This routine finds the rightmost moniker name. For example
it will return "cache:" if you pass in "file:/tmp.txt<link linkend="cache--"><type>""</type></link>". It will 
also store the length of the parent string in <parameter>plen</parameter> (13 for the above 
example)</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> a moniker name
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>plen</parameter>&#160;:</term>
<listitem><simpara> an optional pointer to store the parent length
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the name of the rightmost moniker
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-seek-std-separator" role="function">
<title>bonobo_moniker_util_seek_std_separator ()</title>
<indexterm zone="bonobo-moniker-util-seek-std-separator"><primary sortas="bonobo_moniker_util_seek_std_separator">bonobo_moniker_util_seek_std_separator</primary></indexterm><programlisting><link linkend="int">int</link>                 bonobo_moniker_util_seek_std_separator
                                                        (const <link linkend="CORBA-char">CORBA_char</link> *str,
                                                         <link linkend="int">int</link> min_idx);</programlisting>
<para>
This looks for a moniker separator in a moniker's name string.
</para>
<para>
 See also bonobo_moniker_util_escape</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara> the string to scan
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>min_idx</parameter>&#160;:</term>
<listitem><simpara> the minimum offset at which a separator can be found.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the position of the separator, or a
pointer to the end of the string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-escape" role="function">
<title>bonobo_moniker_util_escape ()</title>
<indexterm zone="bonobo-moniker-util-escape"><primary sortas="bonobo_moniker_util_escape">bonobo_moniker_util_escape</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_moniker_util_escape          (const <link linkend="char">char</link> *string,
                                                         <link linkend="int">int</link> offset);</programlisting>
<para>
Escapes possible separator characters inside a moniker
these include '!' and '#', the '\' escaping character is
used.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara> an unescaped string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>offset</parameter>&#160;:</term>
<listitem><simpara> an offset of characters to ignore
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> an escaped sub-string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-moniker-util-unescape" role="function">
<title>bonobo_moniker_util_unescape ()</title>
<indexterm zone="bonobo-moniker-util-unescape"><primary sortas="bonobo_moniker_util_unescape">bonobo_moniker_util_unescape</primary></indexterm><programlisting><link linkend="char">char</link> *              bonobo_moniker_util_unescape        (const <link linkend="char">char</link> *string,
                                                         <link linkend="int">int</link> num_chars);</programlisting>
<para>
This routine strips <parameter>num_chars</parameter>: from the start of
<parameter>string</parameter>, discards the rest, and proceeds to un-escape
characters escaped with '\'.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>string</parameter>&#160;:</term>
<listitem><simpara> a string
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>num_chars</parameter>&#160;:</term>
<listitem><simpara> the number of chars to process.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> the unescaped sub string.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-url-register" role="function">
<title>bonobo_url_register ()</title>
<indexterm zone="bonobo-url-register"><primary sortas="bonobo_url_register">bonobo_url_register</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_url_register                 (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="char">char</link> *mime_type,
                                                         <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> object,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mime_type</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-url-unregister" role="function">
<title>bonobo_url_unregister ()</title>
<indexterm zone="bonobo-url-unregister"><primary sortas="bonobo_url_unregister">bonobo_url_unregister</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_url_unregister               (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-url-lookup" role="function">
<title>bonobo_url_lookup ()</title>
<indexterm zone="bonobo-url-lookup"><primary sortas="bonobo_url_lookup">bonobo_url_lookup</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_url_lookup                   (<link linkend="char">char</link> *oafiid,
                                                         <link linkend="char">char</link> *url,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>oafiid</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>url</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
