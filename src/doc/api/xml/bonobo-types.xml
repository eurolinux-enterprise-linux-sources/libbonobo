<refentry id="libbonobo-bonobo-types">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-types.top_of_page">bonobo-types</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-types</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-types.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="GType">GType</link>               <link linkend="bonobo-corba-object-type-register-static">bonobo_corba_object_type_register_static</link>
                                                        (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> tc,
                                                         <link linkend="gboolean">gboolean</link> is_bonobo_unknown);
#define             <link linkend="BONOBO-TYPE-UNKNOWN--CAPS">BONOBO_TYPE_UNKNOWN</link>
#define             <link linkend="BONOBO-TYPE-CORBA-ANY--CAPS">BONOBO_TYPE_CORBA_ANY</link>
#define             <link linkend="BONOBO-TYPE-CORBA-OBJECT--CAPS">BONOBO_TYPE_CORBA_OBJECT</link>
#define             <link linkend="BONOBO-TYPE-CORBA-TYPECODE--CAPS">BONOBO_TYPE_CORBA_TYPECODE</link>
#define             <link linkend="BONOBO-TYPE-CORBA-EXCEPTION--CAPS">BONOBO_TYPE_CORBA_EXCEPTION</link>
#define             <link linkend="BONOBO-TYPE-STATIC-CORBA-EXCEPTION--CAPS">BONOBO_TYPE_STATIC_CORBA_EXCEPTION</link>
#define             <link linkend="BONOBO-TYPE-STATIC-UNKNOWN--CAPS">BONOBO_TYPE_STATIC_UNKNOWN</link>
#define             <link linkend="BONOBO-TYPE-STATIC-CORBA-ANY--CAPS">BONOBO_TYPE_STATIC_CORBA_ANY</link>
#define             <link linkend="BONOBO-TYPE-STATIC-CORBA-OBJECT--CAPS">BONOBO_TYPE_STATIC_CORBA_OBJECT</link>
#define             <link linkend="BONOBO-TYPE-STATIC-CORBA-TYPECODE--CAPS">BONOBO_TYPE_STATIC_CORBA_TYPECODE</link>
#define             <link linkend="BONOBO-VALUE-HOLDS-UNKNOWN--CAPS">BONOBO_VALUE_HOLDS_UNKNOWN</link>          (value)
#define             <link linkend="BONOBO-VALUE-HOLDS-CORBA-ANY--CAPS">BONOBO_VALUE_HOLDS_CORBA_ANY</link>        (value)
#define             <link linkend="BONOBO-VALUE-HOLDS-CORBA-OBJECT--CAPS">BONOBO_VALUE_HOLDS_CORBA_OBJECT</link>     (value)
#define             <link linkend="BONOBO-VALUE-HOLDS-CORBA-TYPECODE--CAPS">BONOBO_VALUE_HOLDS_CORBA_TYPECODE</link>   (value)
#define             <link linkend="BONOBO-VALUE-HOLDS-CORBA-EXCEPTION--CAPS">BONOBO_VALUE_HOLDS_CORBA_EXCEPTION</link>  (value)
<link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      <link linkend="bonobo-value-get-unknown">bonobo_value_get_unknown</link>            (const <link linkend="GValue">GValue</link> *value);
<link linkend="BonoboArg">BonoboArg</link> *         <link linkend="bonobo-value-get-corba-any">bonobo_value_get_corba_any</link>          (const <link linkend="GValue">GValue</link> *value);
<link linkend="CORBA-Object">CORBA_Object</link>        <link linkend="bonobo-value-get-corba-object">bonobo_value_get_corba_object</link>       (const <link linkend="GValue">GValue</link> *value);
<link linkend="CORBA-TypeCode">CORBA_TypeCode</link>      <link linkend="bonobo-value-get-corba-typecode">bonobo_value_get_corba_typecode</link>     (const <link linkend="GValue">GValue</link> *value);
const <link linkend="CORBA-Environment">CORBA_Environment</link> * <link linkend="bonobo-value-get-corba-exception">bonobo_value_get_corba_exception</link>
                                                        (const <link linkend="GValue">GValue</link> *value);
<link linkend="void">void</link>                <link linkend="bonobo-value-set-unknown">bonobo_value_set_unknown</link>            (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> unknown);
<link linkend="void">void</link>                <link linkend="bonobo-value-set-corba-any">bonobo_value_set_corba_any</link>          (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *any);
<link linkend="void">void</link>                <link linkend="bonobo-value-set-corba-object">bonobo_value_set_corba_object</link>       (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-Object">CORBA_Object</link> object);
<link linkend="void">void</link>                <link linkend="bonobo-value-set-corba-typecode">bonobo_value_set_corba_typecode</link>     (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> tc);
<link linkend="void">void</link>                <link linkend="bonobo-value-set-corba-environment">bonobo_value_set_corba_environment</link>  (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-closure-invoke-va-list">bonobo_closure_invoke_va_list</link>       (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GValue">GValue</link> *return_value,
                                                         <link linkend="va-list">va_list</link> var_args);
<link linkend="void">void</link>                <link linkend="bonobo-closure-invoke">bonobo_closure_invoke</link>               (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GType">GType</link> return_type,
                                                         ...);
<link linkend="GClosure">GClosure</link> *          <link linkend="bonobo-closure-store">bonobo_closure_store</link>                (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GClosureMarshal">GClosureMarshal</link> default_marshal);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-types.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-types.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="bonobo-corba-object-type-register-static" role="function">
<title>bonobo_corba_object_type_register_static ()</title>
<indexterm zone="bonobo-corba-object-type-register-static"><primary sortas="bonobo_corba_object_type_register_static">bonobo_corba_object_type_register_static</primary></indexterm><programlisting><link linkend="GType">GType</link>               bonobo_corba_object_type_register_static
                                                        (const <link linkend="gchar">gchar</link> *name,
                                                         const <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> tc,
                                                         <link linkend="gboolean">gboolean</link> is_bonobo_unknown);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tc</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>is_bonobo_unknown</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-TYPE-UNKNOWN--CAPS" role="macro">
<title>BONOBO_TYPE_UNKNOWN</title>
<indexterm zone="BONOBO-TYPE-UNKNOWN--CAPS"><primary sortas="BONOBO_TYPE_UNKNOWN">BONOBO_TYPE_UNKNOWN</primary></indexterm><programlisting>#define BONOBO_TYPE_UNKNOWN                         (bonobo_unknown_get_type ())
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for Bonobo_Unknown object references.
</para></refsect2>
<refsect2 id="BONOBO-TYPE-CORBA-ANY--CAPS" role="macro">
<title>BONOBO_TYPE_CORBA_ANY</title>
<indexterm zone="BONOBO-TYPE-CORBA-ANY--CAPS"><primary sortas="BONOBO_TYPE_CORBA_ANY">BONOBO_TYPE_CORBA_ANY</primary></indexterm><programlisting>#define BONOBO_TYPE_CORBA_ANY                       (bonobo_corba_any_get_type ())
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_any.
</para></refsect2>
<refsect2 id="BONOBO-TYPE-CORBA-OBJECT--CAPS" role="macro">
<title>BONOBO_TYPE_CORBA_OBJECT</title>
<indexterm zone="BONOBO-TYPE-CORBA-OBJECT--CAPS"><primary sortas="BONOBO_TYPE_CORBA_OBJECT">BONOBO_TYPE_CORBA_OBJECT</primary></indexterm><programlisting>#define BONOBO_TYPE_CORBA_OBJECT                    (bonobo_corba_object_get_type ())
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_Object object references.
</para></refsect2>
<refsect2 id="BONOBO-TYPE-CORBA-TYPECODE--CAPS" role="macro">
<title>BONOBO_TYPE_CORBA_TYPECODE</title>
<indexterm zone="BONOBO-TYPE-CORBA-TYPECODE--CAPS"><primary sortas="BONOBO_TYPE_CORBA_TYPECODE">BONOBO_TYPE_CORBA_TYPECODE</primary></indexterm><programlisting>#define BONOBO_TYPE_CORBA_TYPECODE                  (bonobo_corba_typecode_get_type ())
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_TypeCode.
</para></refsect2>
<refsect2 id="BONOBO-TYPE-CORBA-EXCEPTION--CAPS" role="macro">
<title>BONOBO_TYPE_CORBA_EXCEPTION</title>
<indexterm zone="BONOBO-TYPE-CORBA-EXCEPTION--CAPS"><primary sortas="BONOBO_TYPE_CORBA_EXCEPTION">BONOBO_TYPE_CORBA_EXCEPTION</primary></indexterm><programlisting>#define BONOBO_TYPE_CORBA_EXCEPTION                 (bonobo_corba_exception_get_type ())
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_Environment.
</para></refsect2>
<refsect2 id="BONOBO-TYPE-STATIC-CORBA-EXCEPTION--CAPS" role="macro">
<title>BONOBO_TYPE_STATIC_CORBA_EXCEPTION</title>
<indexterm zone="BONOBO-TYPE-STATIC-CORBA-EXCEPTION--CAPS"><primary sortas="BONOBO_TYPE_STATIC_CORBA_EXCEPTION">BONOBO_TYPE_STATIC_CORBA_EXCEPTION</primary></indexterm><programlisting>#define BONOBO_TYPE_STATIC_CORBA_EXCEPTION          (bonobo_corba_exception_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_Environment with static scope (see <link linkend="G-SIGNAL-TYPE-STATIC-SCOPE--CAPS"><type>G_SIGNAL_TYPE_STATIC_SCOPE</type></link>).
</para></refsect2>
<refsect2 id="BONOBO-TYPE-STATIC-UNKNOWN--CAPS" role="macro">
<title>BONOBO_TYPE_STATIC_UNKNOWN</title>
<indexterm zone="BONOBO-TYPE-STATIC-UNKNOWN--CAPS"><primary sortas="BONOBO_TYPE_STATIC_UNKNOWN">BONOBO_TYPE_STATIC_UNKNOWN</primary></indexterm><programlisting>#define BONOBO_TYPE_STATIC_UNKNOWN                  (bonobo_unknown_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for Bonobo_Unknown object references with static scope (see <link linkend="G-SIGNAL-TYPE-STATIC-SCOPE--CAPS"><type>G_SIGNAL_TYPE_STATIC_SCOPE</type></link>).
</para></refsect2>
<refsect2 id="BONOBO-TYPE-STATIC-CORBA-ANY--CAPS" role="macro">
<title>BONOBO_TYPE_STATIC_CORBA_ANY</title>
<indexterm zone="BONOBO-TYPE-STATIC-CORBA-ANY--CAPS"><primary sortas="BONOBO_TYPE_STATIC_CORBA_ANY">BONOBO_TYPE_STATIC_CORBA_ANY</primary></indexterm><programlisting>#define BONOBO_TYPE_STATIC_CORBA_ANY                (bonobo_corba_any_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_any with static scope (see <link linkend="G-SIGNAL-TYPE-STATIC-SCOPE--CAPS"><type>G_SIGNAL_TYPE_STATIC_SCOPE</type></link>).
</para></refsect2>
<refsect2 id="BONOBO-TYPE-STATIC-CORBA-OBJECT--CAPS" role="macro">
<title>BONOBO_TYPE_STATIC_CORBA_OBJECT</title>
<indexterm zone="BONOBO-TYPE-STATIC-CORBA-OBJECT--CAPS"><primary sortas="BONOBO_TYPE_STATIC_CORBA_OBJECT">BONOBO_TYPE_STATIC_CORBA_OBJECT</primary></indexterm><programlisting>#define BONOBO_TYPE_STATIC_CORBA_OBJECT             (bonobo_corba_object_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_Object object references with static scope (see <link linkend="G-SIGNAL-TYPE-STATIC-SCOPE--CAPS"><type>G_SIGNAL_TYPE_STATIC_SCOPE</type></link>).
</para></refsect2>
<refsect2 id="BONOBO-TYPE-STATIC-CORBA-TYPECODE--CAPS" role="macro">
<title>BONOBO_TYPE_STATIC_CORBA_TYPECODE</title>
<indexterm zone="BONOBO-TYPE-STATIC-CORBA-TYPECODE--CAPS"><primary sortas="BONOBO_TYPE_STATIC_CORBA_TYPECODE">BONOBO_TYPE_STATIC_CORBA_TYPECODE</primary></indexterm><programlisting>#define BONOBO_TYPE_STATIC_CORBA_TYPECODE           (bonobo_corba_typecode_get_type () | G_SIGNAL_TYPE_STATIC_SCOPE)
</programlisting>
<para>
A <link linkend="GType"><type>GType</type></link> for CORBA_TypeCode object references with static scope (see <link linkend="G-SIGNAL-TYPE-STATIC-SCOPE--CAPS"><type>G_SIGNAL_TYPE_STATIC_SCOPE</type></link>).
</para></refsect2>
<refsect2 id="BONOBO-VALUE-HOLDS-UNKNOWN--CAPS" role="macro">
<title>BONOBO_VALUE_HOLDS_UNKNOWN()</title>
<indexterm zone="BONOBO-VALUE-HOLDS-UNKNOWN--CAPS"><primary sortas="BONOBO_VALUE_HOLDS_UNKNOWN">BONOBO_VALUE_HOLDS_UNKNOWN</primary></indexterm><programlisting>#define BONOBO_VALUE_HOLDS_UNKNOWN(value)           (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_UNKNOWN))
</programlisting>
<para>
Returns true if the <link linkend="GValue"><type>GValue</type></link> contains a Bonobo_Unknown.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-VALUE-HOLDS-CORBA-ANY--CAPS" role="macro">
<title>BONOBO_VALUE_HOLDS_CORBA_ANY()</title>
<indexterm zone="BONOBO-VALUE-HOLDS-CORBA-ANY--CAPS"><primary sortas="BONOBO_VALUE_HOLDS_CORBA_ANY">BONOBO_VALUE_HOLDS_CORBA_ANY</primary></indexterm><programlisting>#define BONOBO_VALUE_HOLDS_CORBA_ANY(value)         (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_ANY))
</programlisting>
<para>
Returns true if the <link linkend="GValue"><type>GValue</type></link> contains a CORBA_any.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-VALUE-HOLDS-CORBA-OBJECT--CAPS" role="macro">
<title>BONOBO_VALUE_HOLDS_CORBA_OBJECT()</title>
<indexterm zone="BONOBO-VALUE-HOLDS-CORBA-OBJECT--CAPS"><primary sortas="BONOBO_VALUE_HOLDS_CORBA_OBJECT">BONOBO_VALUE_HOLDS_CORBA_OBJECT</primary></indexterm><programlisting>#define BONOBO_VALUE_HOLDS_CORBA_OBJECT(value)      (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_OBJECT))
</programlisting>
<para>
Returns true if the <link linkend="GValue"><type>GValue</type></link> contains a CORBA_Object.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-VALUE-HOLDS-CORBA-TYPECODE--CAPS" role="macro">
<title>BONOBO_VALUE_HOLDS_CORBA_TYPECODE()</title>
<indexterm zone="BONOBO-VALUE-HOLDS-CORBA-TYPECODE--CAPS"><primary sortas="BONOBO_VALUE_HOLDS_CORBA_TYPECODE">BONOBO_VALUE_HOLDS_CORBA_TYPECODE</primary></indexterm><programlisting>#define BONOBO_VALUE_HOLDS_CORBA_TYPECODE(value)    (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_TYPECODE))
</programlisting>
<para>
Returns true if the <link linkend="GValue"><type>GValue</type></link> contains a CORBA_TypeCode.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="BONOBO-VALUE-HOLDS-CORBA-EXCEPTION--CAPS" role="macro">
<title>BONOBO_VALUE_HOLDS_CORBA_EXCEPTION()</title>
<indexterm zone="BONOBO-VALUE-HOLDS-CORBA-EXCEPTION--CAPS"><primary sortas="BONOBO_VALUE_HOLDS_CORBA_EXCEPTION">BONOBO_VALUE_HOLDS_CORBA_EXCEPTION</primary></indexterm><programlisting>#define BONOBO_VALUE_HOLDS_CORBA_EXCEPTION(value)   (G_TYPE_CHECK_VALUE_TYPE ((value), BONOBO_TYPE_CORBA_EXCEPTION))
</programlisting>
<para>
Returns true if the <link linkend="GValue"><type>GValue</type></link> contains a CORBA_Environment.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-get-unknown" role="function">
<title>bonobo_value_get_unknown ()</title>
<indexterm zone="bonobo-value-get-unknown"><primary sortas="bonobo_value_get_unknown">bonobo_value_get_unknown</primary></indexterm><programlisting><link linkend="Bonobo-Unknown">Bonobo_Unknown</link>      bonobo_value_get_unknown            (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Get the Bonobo_Unknown value from a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-get-corba-any" role="function">
<title>bonobo_value_get_corba_any ()</title>
<indexterm zone="bonobo-value-get-corba-any"><primary sortas="bonobo_value_get_corba_any">bonobo_value_get_corba_any</primary></indexterm><programlisting><link linkend="BonoboArg">BonoboArg</link> *         bonobo_value_get_corba_any          (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Get the CORBA_any value from a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-get-corba-object" role="function">
<title>bonobo_value_get_corba_object ()</title>
<indexterm zone="bonobo-value-get-corba-object"><primary sortas="bonobo_value_get_corba_object">bonobo_value_get_corba_object</primary></indexterm><programlisting><link linkend="CORBA-Object">CORBA_Object</link>        bonobo_value_get_corba_object       (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Get the CORBA_Object value from a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-get-corba-typecode" role="function">
<title>bonobo_value_get_corba_typecode ()</title>
<indexterm zone="bonobo-value-get-corba-typecode"><primary sortas="bonobo_value_get_corba_typecode">bonobo_value_get_corba_typecode</primary></indexterm><programlisting><link linkend="CORBA-TypeCode">CORBA_TypeCode</link>      bonobo_value_get_corba_typecode     (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Get the CORBA_TypeCode value from a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-get-corba-exception" role="function">
<title>bonobo_value_get_corba_exception ()</title>
<indexterm zone="bonobo-value-get-corba-exception"><primary sortas="bonobo_value_get_corba_exception">bonobo_value_get_corba_exception</primary></indexterm><programlisting>const <link linkend="CORBA-Environment">CORBA_Environment</link> * bonobo_value_get_corba_exception
                                                        (const <link linkend="GValue">GValue</link> *value);</programlisting>
<para>
Get the CORBA_Environment value from a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-set-unknown" role="function">
<title>bonobo_value_set_unknown ()</title>
<indexterm zone="bonobo-value-set-unknown"><primary sortas="bonobo_value_set_unknown">bonobo_value_set_unknown</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_value_set_unknown            (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="Bonobo-Unknown">Bonobo_Unknown</link> unknown);</programlisting>
<para>
Put a <link linkend="Bonobo-Unknow"><type>Bonobo_Unknow</type></link> value in a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>unknown</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-set-corba-any" role="function">
<title>bonobo_value_set_corba_any ()</title>
<indexterm zone="bonobo-value-set-corba-any"><primary sortas="bonobo_value_set_corba_any">bonobo_value_set_corba_any</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_value_set_corba_any          (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-any">CORBA_any</link> *any);</programlisting>
<para>
Put a <link linkend="CORBA-any"><type>CORBA_any</type></link> value in a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>any</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-set-corba-object" role="function">
<title>bonobo_value_set_corba_object ()</title>
<indexterm zone="bonobo-value-set-corba-object"><primary sortas="bonobo_value_set_corba_object">bonobo_value_set_corba_object</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_value_set_corba_object       (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-Object">CORBA_Object</link> object);</programlisting>
<para>
Put a <link linkend="CORBA-Object"><type>CORBA_Object</type></link> value in a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-set-corba-typecode" role="function">
<title>bonobo_value_set_corba_typecode ()</title>
<indexterm zone="bonobo-value-set-corba-typecode"><primary sortas="bonobo_value_set_corba_typecode">bonobo_value_set_corba_typecode</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_value_set_corba_typecode     (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-TypeCode">CORBA_TypeCode</link> tc);</programlisting>
<para>
Put a <link linkend="CORBA-TypeCode"><type>CORBA_TypeCode</type></link> value in a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>tc</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-value-set-corba-environment" role="function">
<title>bonobo_value_set_corba_environment ()</title>
<indexterm zone="bonobo-value-set-corba-environment"><primary sortas="bonobo_value_set_corba_environment">bonobo_value_set_corba_environment</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_value_set_corba_environment  (<link linkend="GValue">GValue</link> *value,
                                                         const <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Put a <link linkend="CORBA-Environment"><type>CORBA_Environment</type></link> value in a <link linkend="GValue"><type>GValue</type></link>.
</para><variablelist role="params">
<varlistentry><term><parameter>value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-closure-invoke-va-list" role="function">
<title>bonobo_closure_invoke_va_list ()</title>
<indexterm zone="bonobo-closure-invoke-va-list"><primary sortas="bonobo_closure_invoke_va_list">bonobo_closure_invoke_va_list</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_closure_invoke_va_list       (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GValue">GValue</link> *return_value,
                                                         <link linkend="va-list">va_list</link> var_args);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>return_value</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>var_args</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-closure-invoke" role="function">
<title>bonobo_closure_invoke ()</title>
<indexterm zone="bonobo-closure-invoke"><primary sortas="bonobo_closure_invoke">bonobo_closure_invoke</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_closure_invoke               (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GType">GType</link> return_type,
                                                         ...);</programlisting>
<para>
Invokes the closure with the arguments.
</para>
<para>
Examples:
<informalexample><programlisting>
   bonobo_closure_invoke (closure, G_TYPE_NONE, G_TYPE_INT, first_arg, 0);
</programlisting></informalexample>
</para>
<para>
<informalexample><programlisting>
   glong retval;
   bonobo_closure_invoke (closure, G_TYPE_LONG, &amp; retval, 0);
</programlisting></informalexample></para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> a standard GClosure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>return_type</parameter>&#160;:</term>
<listitem><simpara> the type of the first va_arg argument in a
set of type / arg pairs.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> list of type / arg pairs
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-closure-store" role="function">
<title>bonobo_closure_store ()</title>
<indexterm zone="bonobo-closure-store"><primary sortas="bonobo_closure_store">bonobo_closure_store</primary></indexterm><programlisting><link linkend="GClosure">GClosure</link> *          bonobo_closure_store                (<link linkend="GClosure">GClosure</link> *closure,
                                                         <link linkend="GClosureMarshal">GClosureMarshal</link> default_marshal);</programlisting>
<para>
Does the necessary refcounting magic and returns a directly
storable closure</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>closure</parameter>&#160;:</term>
<listitem><simpara> a standard GClosure
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>default_marshal</parameter>&#160;:</term>
<listitem><simpara> the default marshaller to use
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <parameter>closure</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
