<refentry id="libbonobo-bonobo-stream-client">
<refmeta>
<refentrytitle role="top_of_page" id="libbonobo-bonobo-stream-client.top_of_page">bonobo-stream-client</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBBONOBO Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>bonobo-stream-client</refname>
<refpurpose>Simplified client wrapper functions for the Stream interface</refpurpose>
</refnamediv>

<refsynopsisdiv id="libbonobo-bonobo-stream-client.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
<link linkend="void">void</link>                <link linkend="bonobo-stream-client-write">bonobo_stream_client_write</link>          (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="void">void</link> *buffer,
                                                         const <link linkend="size-t">size_t</link> size,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="guint8">guint8</link> *            <link linkend="bonobo-stream-client-read">bonobo_stream_client_read</link>           (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="size-t">size_t</link> size,
                                                         <link linkend="CORBA-long">CORBA_long</link> *length_read,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-stream-client-write-string">bonobo_stream_client_write_string</link>   (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="char">char</link> *str,
                                                         const <link linkend="gboolean">gboolean</link> terminate,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="void">void</link>                <link linkend="bonobo-stream-client-printf">bonobo_stream_client_printf</link>         (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="gboolean">gboolean</link> terminate,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         const <link linkend="char">char</link> *fmt,
                                                         ...);
<link linkend="CORBA-long">CORBA_long</link>          <link linkend="bonobo-stream-client-read-string">bonobo_stream_client_read_string</link>    (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         <link linkend="char">char</link> **str,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
<link linkend="CORBA-long">CORBA_long</link>          <link linkend="bonobo-stream-client-get-length">bonobo_stream_client_get_length</link>     (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);
</synopsis>
</refsynopsisdiv>









<refsect1 id="libbonobo-bonobo-stream-client.description" role="desc">
<title role="desc.title">Description</title>
<para>
These interfaces are designed to make the stream interface
slightly easier to use from client code. This is done 2 ways,
first by make the exception environments optiional, and secondly
by providing slightly nicer semantics.
</para>
<para>
  <example>
     <title>Writing some simple data to a stream</title>
     <programlisting>
bonobo_stream_client_printf (stream, TRUE, ev, "Hello World: %d", 5);
     </programlisting>
  </example>
  It is well worth using the bonobo_stream_client_write function
for any potentialy large writes, since this blocks the data into
sensible chunks. This is important, otherwise a single transfer is
attempted that will cause hassles in the CORBA stubs. [ NB. ORBit
tries to alloca a huge chunk of memory and SEGVs ].
</para>
</refsect1>

<refsect1 id="libbonobo-bonobo-stream-client.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="bonobo-stream-client-write" role="function">
<title>bonobo_stream_client_write ()</title>
<indexterm zone="bonobo-stream-client-write"><primary sortas="bonobo_stream_client_write">bonobo_stream_client_write</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_stream_client_write          (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="void">void</link> *buffer,
                                                         const <link linkend="size-t">size_t</link> size,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to write <parameter>size</parameter> bytes from <parameter>buffer</parameter> to the
<parameter>stream</parameter>.  It will continue to write bytes until a fatal error
occurs. It works around serious problems in ORBit's handling of
sequences, and makes for nicer, saner protocol usage for
transfering huge chunks of data.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> A CORBA Object reference to a Bonobo_Stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>buffer</parameter>&#160;:</term>
<listitem><simpara> the buffer to write
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> number of bytes to write
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a CORBA environment to return status information.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-client-read" role="function">
<title>bonobo_stream_client_read ()</title>
<indexterm zone="bonobo-stream-client-read"><primary sortas="bonobo_stream_client_read">bonobo_stream_client_read</primary></indexterm><programlisting><link linkend="guint8">guint8</link> *            bonobo_stream_client_read           (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="size-t">size_t</link> size,
                                                         <link linkend="CORBA-long">CORBA_long</link> *length_read,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to read <parameter>size</parameter> bytes from the <parameter>stream</parameter> into
a freshly g_ allocated buffer which is returned. Whilst this
routine may seem pointless; it reads the stream in small chunks
avoiding possibly massive alloca's inside ORBit's stub/skel code.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> A CORBA Object reference to a Bonobo_Stream
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> number of bytes to read or -1 for whole stream.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>length_read</parameter>&#160;:</term>
<listitem><simpara> if non NULL will be set to the length read
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> a CORBA environment to return status information.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>NULL on any sort of failure &amp; 0 size read.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-client-write-string" role="function">
<title>bonobo_stream_client_write_string ()</title>
<indexterm zone="bonobo-stream-client-write-string"><primary sortas="bonobo_stream_client_write_string">bonobo_stream_client_write_string</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_stream_client_write_string   (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="char">char</link> *str,
                                                         const <link linkend="gboolean">gboolean</link> terminate,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
This is a helper routine to write the string in <parameter>str</parameter> to <parameter>stream</parameter>.
If <parameter>terminate</parameter> is TRUE, a NULL character will be written out at the
end of the string.  This function will not return until the entire
string has been written out, unless an exception is raised.  See
also <link linkend="bonobo-stream-client-write"><function>bonobo_stream_client_write()</function></link>. Continues writing until finished
or a fatal exception occurs.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> A CORBA object reference to a <link linkend="Bonobo-Stream"><type>Bonobo_Stream</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara> A string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>terminate</parameter>&#160;:</term>
<listitem><simpara> Whether or not to write the \0 at the end of the
string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> A pointer to a <link linkend="CORBA-Environment"><type>CORBA_Environment</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-client-printf" role="function">
<title>bonobo_stream_client_printf ()</title>
<indexterm zone="bonobo-stream-client-printf"><primary sortas="bonobo_stream_client_printf">bonobo_stream_client_printf</primary></indexterm><programlisting><link linkend="void">void</link>                bonobo_stream_client_printf         (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         const <link linkend="gboolean">gboolean</link> terminate,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev,
                                                         const <link linkend="char">char</link> *fmt,
                                                         ...);</programlisting>
<para>
Processes <parameter>fmt</parameter> and the arguments which follow it to produce a
string.  Writes this string out to <parameter>stream</parameter>.  This function will not
return until the entire string is written out, unless an exception
is raised.  See also <link linkend="bonobo-stream-client-write-string"><function>bonobo_stream_client_write_string()</function></link> and
<link linkend="bonobo-stream-client-write"><function>bonobo_stream_client_write()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> A CORBA object reference to a <link linkend="Bonobo-Stream"><type>Bonobo_Stream</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>terminate</parameter>&#160;:</term>
<listitem><simpara> Whether or not to null-terminate the string when it is
written out to the stream.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> A CORBA_Environment pointer.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>fmt</parameter>&#160;:</term>
<listitem><simpara> The printf format string.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&#160;:</term>
<listitem><simpara> format arguments
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-client-read-string" role="function">
<title>bonobo_stream_client_read_string ()</title>
<indexterm zone="bonobo-stream-client-read-string"><primary sortas="bonobo_stream_client_read_string">bonobo_stream_client_read_string</primary></indexterm><programlisting><link linkend="CORBA-long">CORBA_long</link>          bonobo_stream_client_read_string    (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         <link linkend="char">char</link> **str,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Reads a NULL-terminated string from <parameter>stream</parameter> and stores it in a
newly-allocated string in <parameter>str</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="Bonobo-Stream"><type>Bonobo_Stream</type></link> from which the string will be read.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>str</parameter>&#160;:</term>
<listitem><simpara> The string pointer in which the string will be stored.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> A pointer to a <link linkend="CORBA-Environment"><type>CORBA_Environment</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The number of bytes read, or -1 if an error occurs.
If an exception occurs, <parameter>ev</parameter> will contain the exception.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="bonobo-stream-client-get-length" role="function">
<title>bonobo_stream_client_get_length ()</title>
<indexterm zone="bonobo-stream-client-get-length"><primary sortas="bonobo_stream_client_get_length">bonobo_stream_client_get_length</primary></indexterm><programlisting><link linkend="CORBA-long">CORBA_long</link>          bonobo_stream_client_get_length     (const <link linkend="Bonobo-Stream">Bonobo_Stream</link> stream,
                                                         <link linkend="CORBA-Environment">CORBA_Environment</link> *ev);</programlisting>
<para>
Does the grunt work to get the length of a stream,
returns -1 if the length is not available. Returns -1
on exception.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>stream</parameter>&#160;:</term>
<listitem><simpara> The stream.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>ev</parameter>&#160;:</term>
<listitem><simpara> Exception environment
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> Length or -1
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>



<refsect1 id="libbonobo-bonobo-stream-client.see-also">
<title>See Also</title>
<para>
<link linkend="BonoboStream"><type>BonoboStream</type></link>
</para>
</refsect1>

</refentry>
